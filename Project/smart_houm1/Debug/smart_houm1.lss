
smart_houm1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000070  00800060  00002f40  00002fd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008000d0  008000d0  00003044  2**0
                  ALLOC
  3 .stab         00002f64  00000000  00000000  00003044  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001373  00000000  00000000  00005fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000731b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000745b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000075cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009214  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a0ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aeac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b00c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b299  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ba67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3d       	cpi	r26, 0xD0	; 208
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ed       	ldi	r26, 0xD0	; 208
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3e       	cpi	r26, 0xE3	; 227
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6a 07 	call	0xed4	; 0xed4 <main>
      8a:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 eb       	ldi	r26, 0xB6	; 182
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 73 17 	jmp	0x2ee6	; 0x2ee6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 73 17 	jmp	0x2ee6	; 0x2ee6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 eb       	ldi	r24, 0xB6	; 182
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 73 17 	jmp	0x2ee6	; 0x2ee6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 73 17 	jmp	0x2ee6	; 0x2ee6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 73 17 	jmp	0x2ee6	; 0x2ee6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 77 17 	jmp	0x2eee	; 0x2eee <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer_Isr>:
volatile u8 G_u8TimerFlag = 0 ;
volatile u16 G_u16Adc_Value = 0 ;


void Timer_Isr(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Timer_Isr+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	switch(G_u8TimerFlag)
     b50:	80 91 d0 00 	lds	r24, 0x00D0
     b54:	28 2f       	mov	r18, r24
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	3a 83       	std	Y+2, r19	; 0x02
     b5a:	29 83       	std	Y+1, r18	; 0x01
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
     b60:	82 30       	cpi	r24, 0x02	; 2
     b62:	91 05       	cpc	r25, r1
     b64:	91 f0       	breq	.+36     	; 0xb8a <Timer_Isr+0x44>
     b66:	29 81       	ldd	r18, Y+1	; 0x01
     b68:	3a 81       	ldd	r19, Y+2	; 0x02
     b6a:	23 30       	cpi	r18, 0x03	; 3
     b6c:	31 05       	cpc	r19, r1
     b6e:	a9 f0       	breq	.+42     	; 0xb9a <Timer_Isr+0x54>
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	9a 81       	ldd	r25, Y+2	; 0x02
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	91 05       	cpc	r25, r1
     b78:	b9 f4       	brne	.+46     	; 0xba8 <Timer_Isr+0x62>
	{
	case Close_LDE  :
		MDIO_vSetPinVal(DIO_PORTA,DIO_PIN3,DIO_LOW);
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	63 e0       	ldi	r22, 0x03	; 3
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	0e 94 19 0c 	call	0x1832	; 0x1832 <MDIO_vSetPinVal>
		MTIMERS_vStopTimer();
     b84:	0e 94 0a 09 	call	0x1214	; 0x1214 <MTIMERS_vStopTimer>
     b88:	0f c0       	rjmp	.+30     	; 0xba8 <Timer_Isr+0x62>
		break;
	case Close_DCmot :
		MDIO_vSetPinVal(DIO_PORTA,DIO_PIN2,DIO_LOW);
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	62 e0       	ldi	r22, 0x02	; 2
     b8e:	40 e0       	ldi	r20, 0x00	; 0
     b90:	0e 94 19 0c 	call	0x1832	; 0x1832 <MDIO_vSetPinVal>
		MTIMERS_vStopTimer();
     b94:	0e 94 0a 09 	call	0x1214	; 0x1214 <MTIMERS_vStopTimer>
     b98:	07 c0       	rjmp	.+14     	; 0xba8 <Timer_Isr+0x62>
		break;
	case Close_Buzzer :
		MDIO_vSetPinVal(DIO_PORTA,DIO_PIN4,DIO_LOW);
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	64 e0       	ldi	r22, 0x04	; 4
     b9e:	40 e0       	ldi	r20, 0x00	; 0
     ba0:	0e 94 19 0c 	call	0x1832	; 0x1832 <MDIO_vSetPinVal>
			MTIMERS_vStopTimer();
     ba4:	0e 94 0a 09 	call	0x1214	; 0x1214 <MTIMERS_vStopTimer>
			break;

	}

}
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	cf 91       	pop	r28
     bae:	df 91       	pop	r29
     bb0:	08 95       	ret

00000bb2 <Adc_Isr>:


void Adc_Isr(void)
{
     bb2:	df 93       	push	r29
     bb4:	cf 93       	push	r28
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
     bba:	2e 97       	sbiw	r28, 0x0e	; 14
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	cd bf       	out	0x3d, r28	; 61
	HLCD_vClearDisplay();
     bc6:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <HLCD_vClearDisplay>
	G_u16Adc_Value = MADC_u16GetADCData();
     bca:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <MADC_u16GetADCData>
     bce:	90 93 d2 00 	sts	0x00D2, r25
     bd2:	80 93 d1 00 	sts	0x00D1, r24
	G_u16Adc_Value = (G_u16Adc_Value * 500)/1024;
     bd6:	20 91 d1 00 	lds	r18, 0x00D1
     bda:	30 91 d2 00 	lds	r19, 0x00D2
     bde:	84 ef       	ldi	r24, 0xF4	; 244
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	ac 01       	movw	r20, r24
     be4:	24 9f       	mul	r18, r20
     be6:	c0 01       	movw	r24, r0
     be8:	25 9f       	mul	r18, r21
     bea:	90 0d       	add	r25, r0
     bec:	34 9f       	mul	r19, r20
     bee:	90 0d       	add	r25, r0
     bf0:	11 24       	eor	r1, r1
     bf2:	89 2f       	mov	r24, r25
     bf4:	99 27       	eor	r25, r25
     bf6:	86 95       	lsr	r24
     bf8:	86 95       	lsr	r24
     bfa:	90 93 d2 00 	sts	0x00D2, r25
     bfe:	80 93 d1 00 	sts	0x00D1, r24
	HLCD_vPrintString("Temp =");
     c02:	80 e6       	ldi	r24, 0x60	; 96
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 a9 14 	call	0x2952	; 0x2952 <HLCD_vPrintString>
	HLCD_vPrintNumber(G_u16Adc_Value);
     c0a:	80 91 d1 00 	lds	r24, 0x00D1
     c0e:	90 91 d2 00 	lds	r25, 0x00D2
     c12:	cc 01       	movw	r24, r24
     c14:	a0 e0       	ldi	r26, 0x00	; 0
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	bc 01       	movw	r22, r24
     c1a:	cd 01       	movw	r24, r26
     c1c:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <HLCD_vPrintNumber>
	if(G_u16Adc_Value > 30)
     c20:	80 91 d1 00 	lds	r24, 0x00D1
     c24:	90 91 d2 00 	lds	r25, 0x00D2
     c28:	8f 31       	cpi	r24, 0x1F	; 31
     c2a:	91 05       	cpc	r25, r1
     c2c:	28 f0       	brcs	.+10     	; 0xc38 <Adc_Isr+0x86>
	{
		MDIO_vSetPinVal(DIO_PORTA,DIO_PIN4,DIO_HIGH);
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	64 e0       	ldi	r22, 0x04	; 4
     c32:	41 e0       	ldi	r20, 0x01	; 1
     c34:	0e 94 19 0c 	call	0x1832	; 0x1832 <MDIO_vSetPinVal>
	}

	G_u8TimerFlag = Close_Buzzer ;
     c38:	83 e0       	ldi	r24, 0x03	; 3
     c3a:	80 93 d0 00 	sts	0x00D0, r24
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	aa ef       	ldi	r26, 0xFA	; 250
     c44:	b4 e4       	ldi	r27, 0x44	; 68
     c46:	8b 87       	std	Y+11, r24	; 0x0b
     c48:	9c 87       	std	Y+12, r25	; 0x0c
     c4a:	ad 87       	std	Y+13, r26	; 0x0d
     c4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c4e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c50:	7c 85       	ldd	r23, Y+12	; 0x0c
     c52:	8d 85       	ldd	r24, Y+13	; 0x0d
     c54:	9e 85       	ldd	r25, Y+14	; 0x0e
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	4a ef       	ldi	r20, 0xFA	; 250
     c5c:	54 e4       	ldi	r21, 0x44	; 68
     c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	8f 83       	std	Y+7, r24	; 0x07
     c68:	98 87       	std	Y+8, r25	; 0x08
     c6a:	a9 87       	std	Y+9, r26	; 0x09
     c6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c6e:	6f 81       	ldd	r22, Y+7	; 0x07
     c70:	78 85       	ldd	r23, Y+8	; 0x08
     c72:	89 85       	ldd	r24, Y+9	; 0x09
     c74:	9a 85       	ldd	r25, Y+10	; 0x0a
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	40 e8       	ldi	r20, 0x80	; 128
     c7c:	5f e3       	ldi	r21, 0x3F	; 63
     c7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c82:	88 23       	and	r24, r24
     c84:	2c f4       	brge	.+10     	; 0xc90 <Adc_Isr+0xde>
		__ticks = 1;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	9e 83       	std	Y+6, r25	; 0x06
     c8c:	8d 83       	std	Y+5, r24	; 0x05
     c8e:	3f c0       	rjmp	.+126    	; 0xd0e <Adc_Isr+0x15c>
	else if (__tmp > 65535)
     c90:	6f 81       	ldd	r22, Y+7	; 0x07
     c92:	78 85       	ldd	r23, Y+8	; 0x08
     c94:	89 85       	ldd	r24, Y+9	; 0x09
     c96:	9a 85       	ldd	r25, Y+10	; 0x0a
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	3f ef       	ldi	r19, 0xFF	; 255
     c9c:	4f e7       	ldi	r20, 0x7F	; 127
     c9e:	57 e4       	ldi	r21, 0x47	; 71
     ca0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ca4:	18 16       	cp	r1, r24
     ca6:	4c f5       	brge	.+82     	; 0xcfa <Adc_Isr+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ca8:	6b 85       	ldd	r22, Y+11	; 0x0b
     caa:	7c 85       	ldd	r23, Y+12	; 0x0c
     cac:	8d 85       	ldd	r24, Y+13	; 0x0d
     cae:	9e 85       	ldd	r25, Y+14	; 0x0e
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e2       	ldi	r20, 0x20	; 32
     cb6:	51 e4       	ldi	r21, 0x41	; 65
     cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cbc:	dc 01       	movw	r26, r24
     cbe:	cb 01       	movw	r24, r22
     cc0:	bc 01       	movw	r22, r24
     cc2:	cd 01       	movw	r24, r26
     cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc8:	dc 01       	movw	r26, r24
     cca:	cb 01       	movw	r24, r22
     ccc:	9e 83       	std	Y+6, r25	; 0x06
     cce:	8d 83       	std	Y+5, r24	; 0x05
     cd0:	0f c0       	rjmp	.+30     	; 0xcf0 <Adc_Isr+0x13e>
     cd2:	88 ec       	ldi	r24, 0xC8	; 200
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	9c 83       	std	Y+4, r25	; 0x04
     cd8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	9c 81       	ldd	r25, Y+4	; 0x04
     cde:	01 97       	sbiw	r24, 0x01	; 1
     ce0:	f1 f7       	brne	.-4      	; 0xcde <Adc_Isr+0x12c>
     ce2:	9c 83       	std	Y+4, r25	; 0x04
     ce4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce6:	8d 81       	ldd	r24, Y+5	; 0x05
     ce8:	9e 81       	ldd	r25, Y+6	; 0x06
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	9e 83       	std	Y+6, r25	; 0x06
     cee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cf0:	8d 81       	ldd	r24, Y+5	; 0x05
     cf2:	9e 81       	ldd	r25, Y+6	; 0x06
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	69 f7       	brne	.-38     	; 0xcd2 <Adc_Isr+0x120>
     cf8:	14 c0       	rjmp	.+40     	; 0xd22 <Adc_Isr+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cfa:	6f 81       	ldd	r22, Y+7	; 0x07
     cfc:	78 85       	ldd	r23, Y+8	; 0x08
     cfe:	89 85       	ldd	r24, Y+9	; 0x09
     d00:	9a 85       	ldd	r25, Y+10	; 0x0a
     d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	8d 81       	ldd	r24, Y+5	; 0x05
     d10:	9e 81       	ldd	r25, Y+6	; 0x06
     d12:	9a 83       	std	Y+2, r25	; 0x02
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	9a 81       	ldd	r25, Y+2	; 0x02
     d1a:	01 97       	sbiw	r24, 0x01	; 1
     d1c:	f1 f7       	brne	.-4      	; 0xd1a <Adc_Isr+0x168>
     d1e:	9a 83       	std	Y+2, r25	; 0x02
     d20:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	MTIMERS_vSetInterval_Asynch(7000,Timer_Isr);
     d22:	23 ea       	ldi	r18, 0xA3	; 163
     d24:	35 e0       	ldi	r19, 0x05	; 5
     d26:	88 e5       	ldi	r24, 0x58	; 88
     d28:	9b e1       	ldi	r25, 0x1B	; 27
     d2a:	b9 01       	movw	r22, r18
     d2c:	0e 94 d5 08 	call	0x11aa	; 0x11aa <MTIMERS_vSetInterval_Asynch>
	HLCD_vClearDisplay();
     d30:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <HLCD_vClearDisplay>
	vSysteFrontEnd();
     d34:	0e 94 0b 08 	call	0x1016	; 0x1016 <vSysteFrontEnd>


}
     d38:	2e 96       	adiw	r28, 0x0e	; 14
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <Adc_Isr2>:

void Adc_Isr2(void)
{
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	2e 97       	sbiw	r28, 0x0e	; 14
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
	MDIO_vSetPinVal(DIO_PORTA,DIO_PIN3,DIO_HIGH);
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	63 e0       	ldi	r22, 0x03	; 3
     d62:	41 e0       	ldi	r20, 0x01	; 1
     d64:	0e 94 19 0c 	call	0x1832	; 0x1832 <MDIO_vSetPinVal>
	G_u16Adc_Value=MADC_u16GetADCData();
     d68:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <MADC_u16GetADCData>
     d6c:	90 93 d2 00 	sts	0x00D2, r25
     d70:	80 93 d1 00 	sts	0x00D1, r24
	G_u16Adc_Value = (G_u16Adc_Value * 500)/1024;
     d74:	20 91 d1 00 	lds	r18, 0x00D1
     d78:	30 91 d2 00 	lds	r19, 0x00D2
     d7c:	84 ef       	ldi	r24, 0xF4	; 244
     d7e:	91 e0       	ldi	r25, 0x01	; 1
     d80:	ac 01       	movw	r20, r24
     d82:	24 9f       	mul	r18, r20
     d84:	c0 01       	movw	r24, r0
     d86:	25 9f       	mul	r18, r21
     d88:	90 0d       	add	r25, r0
     d8a:	34 9f       	mul	r19, r20
     d8c:	90 0d       	add	r25, r0
     d8e:	11 24       	eor	r1, r1
     d90:	89 2f       	mov	r24, r25
     d92:	99 27       	eor	r25, r25
     d94:	86 95       	lsr	r24
     d96:	86 95       	lsr	r24
     d98:	90 93 d2 00 	sts	0x00D2, r25
     d9c:	80 93 d1 00 	sts	0x00D1, r24
	HLCD_vClearDisplay();
     da0:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <HLCD_vClearDisplay>
	HLCD_vPrintString("LDR_Value = ");
     da4:	87 e6       	ldi	r24, 0x67	; 103
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 a9 14 	call	0x2952	; 0x2952 <HLCD_vPrintString>
	HLCD_vPrintNumber(G_u16Adc_Value);
     dac:	80 91 d1 00 	lds	r24, 0x00D1
     db0:	90 91 d2 00 	lds	r25, 0x00D2
     db4:	cc 01       	movw	r24, r24
     db6:	a0 e0       	ldi	r26, 0x00	; 0
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	bc 01       	movw	r22, r24
     dbc:	cd 01       	movw	r24, r26
     dbe:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <HLCD_vPrintNumber>
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	aa ef       	ldi	r26, 0xFA	; 250
     dc8:	b4 e4       	ldi	r27, 0x44	; 68
     dca:	8b 87       	std	Y+11, r24	; 0x0b
     dcc:	9c 87       	std	Y+12, r25	; 0x0c
     dce:	ad 87       	std	Y+13, r26	; 0x0d
     dd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
     dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
     dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	4a ef       	ldi	r20, 0xFA	; 250
     de0:	54 e4       	ldi	r21, 0x44	; 68
     de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	8f 83       	std	Y+7, r24	; 0x07
     dec:	98 87       	std	Y+8, r25	; 0x08
     dee:	a9 87       	std	Y+9, r26	; 0x09
     df0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     df2:	6f 81       	ldd	r22, Y+7	; 0x07
     df4:	78 85       	ldd	r23, Y+8	; 0x08
     df6:	89 85       	ldd	r24, Y+9	; 0x09
     df8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e8       	ldi	r20, 0x80	; 128
     e00:	5f e3       	ldi	r21, 0x3F	; 63
     e02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e06:	88 23       	and	r24, r24
     e08:	2c f4       	brge	.+10     	; 0xe14 <Adc_Isr2+0xca>
		__ticks = 1;
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	9e 83       	std	Y+6, r25	; 0x06
     e10:	8d 83       	std	Y+5, r24	; 0x05
     e12:	3f c0       	rjmp	.+126    	; 0xe92 <Adc_Isr2+0x148>
	else if (__tmp > 65535)
     e14:	6f 81       	ldd	r22, Y+7	; 0x07
     e16:	78 85       	ldd	r23, Y+8	; 0x08
     e18:	89 85       	ldd	r24, Y+9	; 0x09
     e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	3f ef       	ldi	r19, 0xFF	; 255
     e20:	4f e7       	ldi	r20, 0x7F	; 127
     e22:	57 e4       	ldi	r21, 0x47	; 71
     e24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e28:	18 16       	cp	r1, r24
     e2a:	4c f5       	brge	.+82     	; 0xe7e <Adc_Isr2+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e2c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e2e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e30:	8d 85       	ldd	r24, Y+13	; 0x0d
     e32:	9e 85       	ldd	r25, Y+14	; 0x0e
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 e2       	ldi	r20, 0x20	; 32
     e3a:	51 e4       	ldi	r21, 0x41	; 65
     e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	bc 01       	movw	r22, r24
     e46:	cd 01       	movw	r24, r26
     e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	9e 83       	std	Y+6, r25	; 0x06
     e52:	8d 83       	std	Y+5, r24	; 0x05
     e54:	0f c0       	rjmp	.+30     	; 0xe74 <Adc_Isr2+0x12a>
     e56:	88 ec       	ldi	r24, 0xC8	; 200
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	9c 83       	std	Y+4, r25	; 0x04
     e5c:	8b 83       	std	Y+3, r24	; 0x03
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	9c 81       	ldd	r25, Y+4	; 0x04
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	f1 f7       	brne	.-4      	; 0xe62 <Adc_Isr2+0x118>
     e66:	9c 83       	std	Y+4, r25	; 0x04
     e68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e6a:	8d 81       	ldd	r24, Y+5	; 0x05
     e6c:	9e 81       	ldd	r25, Y+6	; 0x06
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	9e 83       	std	Y+6, r25	; 0x06
     e72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e74:	8d 81       	ldd	r24, Y+5	; 0x05
     e76:	9e 81       	ldd	r25, Y+6	; 0x06
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	69 f7       	brne	.-38     	; 0xe56 <Adc_Isr2+0x10c>
     e7c:	14 c0       	rjmp	.+40     	; 0xea6 <Adc_Isr2+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e7e:	6f 81       	ldd	r22, Y+7	; 0x07
     e80:	78 85       	ldd	r23, Y+8	; 0x08
     e82:	89 85       	ldd	r24, Y+9	; 0x09
     e84:	9a 85       	ldd	r25, Y+10	; 0x0a
     e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	8d 83       	std	Y+5, r24	; 0x05
     e92:	8d 81       	ldd	r24, Y+5	; 0x05
     e94:	9e 81       	ldd	r25, Y+6	; 0x06
     e96:	9a 83       	std	Y+2, r25	; 0x02
     e98:	89 83       	std	Y+1, r24	; 0x01
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	9a 81       	ldd	r25, Y+2	; 0x02
     e9e:	01 97       	sbiw	r24, 0x01	; 1
     ea0:	f1 f7       	brne	.-4      	; 0xe9e <Adc_Isr2+0x154>
     ea2:	9a 83       	std	Y+2, r25	; 0x02
     ea4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	G_u8TimerFlag = Close_LDE ;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	80 93 d0 00 	sts	0x00D0, r24
	MTIMERS_vSetInterval_Asynch(7000,Timer_Isr);
     eac:	23 ea       	ldi	r18, 0xA3	; 163
     eae:	35 e0       	ldi	r19, 0x05	; 5
     eb0:	88 e5       	ldi	r24, 0x58	; 88
     eb2:	9b e1       	ldi	r25, 0x1B	; 27
     eb4:	b9 01       	movw	r22, r18
     eb6:	0e 94 d5 08 	call	0x11aa	; 0x11aa <MTIMERS_vSetInterval_Asynch>
	HLCD_vClearDisplay();
     eba:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <HLCD_vClearDisplay>
	vSysteFrontEnd();
     ebe:	0e 94 0b 08 	call	0x1016	; 0x1016 <vSysteFrontEnd>

}
     ec2:	2e 96       	adiw	r28, 0x0e	; 14
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <main>:




int main(void)
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
	MGIE_vEnableGlobalInterrupt();
     edc:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <MGIE_vEnableGlobalInterrupt>
	MADC_vInit();
     ee0:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <MADC_vInit>
	HLCD_vInit();
     ee4:	0e 94 24 12 	call	0x2448	; 0x2448 <HLCD_vInit>
	MTIMERS_vInit();
     ee8:	0e 94 b4 08 	call	0x1168	; 0x1168 <MTIMERS_vInit>
	HKPD_vInit();
     eec:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <HKPD_vInit>
	MDIO_vSetPinDir(DIO_PORTA,DIO_PIN4,DIO_OUTPUT);
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	64 e0       	ldi	r22, 0x04	; 4
     ef4:	41 e0       	ldi	r20, 0x01	; 1
     ef6:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTA,DIO_PIN3,DIO_OUTPUT);
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	63 e0       	ldi	r22, 0x03	; 3
     efe:	41 e0       	ldi	r20, 0x01	; 1
     f00:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_vSetPinDir>
	vSysteFrontEnd();
     f04:	0e 94 0b 08 	call	0x1016	; 0x1016 <vSysteFrontEnd>

	while(1)
	{
		vSysteOption();
     f08:	0e 94 87 07 	call	0xf0e	; 0xf0e <vSysteOption>
     f0c:	fd cf       	rjmp	.-6      	; 0xf08 <main+0x34>

00000f0e <vSysteOption>:

}


void vSysteOption(void)
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	00 d0       	rcall	.+0      	; 0xf14 <vSysteOption+0x6>
     f14:	00 d0       	rcall	.+0      	; 0xf16 <vSysteOption+0x8>
     f16:	0f 92       	push	r0
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
	u8 L_u8flag =0;
     f1c:	1b 82       	std	Y+3, r1	; 0x03
	u8 L_u8Flag1 =0;
     f1e:	1a 82       	std	Y+2, r1	; 0x02
	u8 L_u8DO = 0 ;
     f20:	19 82       	std	Y+1, r1	; 0x01
	switch(HKPD_u8GetPressedKey())
     f22:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <HKPD_u8GetPressedKey>
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	3d 83       	std	Y+5, r19	; 0x05
     f2c:	2c 83       	std	Y+4, r18	; 0x04
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	9d 81       	ldd	r25, Y+5	; 0x05
     f32:	82 30       	cpi	r24, 0x02	; 2
     f34:	91 05       	cpc	r25, r1
     f36:	b1 f0       	breq	.+44     	; 0xf64 <vSysteOption+0x56>
     f38:	2c 81       	ldd	r18, Y+4	; 0x04
     f3a:	3d 81       	ldd	r19, Y+5	; 0x05
     f3c:	23 30       	cpi	r18, 0x03	; 3
     f3e:	31 05       	cpc	r19, r1
     f40:	09 f4       	brne	.+2      	; 0xf44 <vSysteOption+0x36>
     f42:	5a c0       	rjmp	.+180    	; 0xff8 <vSysteOption+0xea>
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	9d 81       	ldd	r25, Y+5	; 0x05
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	91 05       	cpc	r25, r1
     f4c:	09 f0       	breq	.+2      	; 0xf50 <vSysteOption+0x42>
     f4e:	5b c0       	rjmp	.+182    	; 0x1006 <vSysteOption+0xf8>
	{
	case Temp:
		MADC_vSetCallback(Adc_Isr);
     f50:	89 ed       	ldi	r24, 0xD9	; 217
     f52:	95 e0       	ldi	r25, 0x05	; 5
     f54:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <MADC_vSetCallback>
		MADC_vStartConversion(CHANNEL_00);
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <MADC_vStartConversion>
		L_u8Flag1= 1;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	8a 83       	std	Y+2, r24	; 0x02
     f62:	51 c0       	rjmp	.+162    	; 0x1006 <vSysteOption+0xf8>
		break;
	case DC_mot:
		HLCD_vClearDisplay();
     f64:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <HLCD_vClearDisplay>
		HLCD_vPrintString("1:ON");
     f68:	84 e7       	ldi	r24, 0x74	; 116
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 a9 14 	call	0x2952	; 0x2952 <HLCD_vPrintString>
		HLCD_vGoToXY(0,7);
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	67 e0       	ldi	r22, 0x07	; 7
     f74:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <HLCD_vGoToXY>
		HLCD_vPrintString("2:OFF");
     f78:	89 e7       	ldi	r24, 0x79	; 121
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 94 a9 14 	call	0x2952	; 0x2952 <HLCD_vPrintString>
		HLCD_vGoToXY(1,0);
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <HLCD_vGoToXY>
		HLCD_vPrintString("3:back to min");
     f88:	8f e7       	ldi	r24, 0x7F	; 127
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 94 a9 14 	call	0x2952	; 0x2952 <HLCD_vPrintString>
     f90:	2f c0       	rjmp	.+94     	; 0xff0 <vSysteOption+0xe2>
		while(L_u8flag==0)
		{
			L_u8DO = HKPD_u8GetPressedKey();
     f92:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <HKPD_u8GetPressedKey>
     f96:	89 83       	std	Y+1, r24	; 0x01
			if(L_u8DO==ON)
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	61 f4       	brne	.+24     	; 0xfb6 <vSysteOption+0xa8>
			{
				MDIO_vSetPinVal(DIO_PORTA,DIO_PIN2,DIO_HIGH);
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	62 e0       	ldi	r22, 0x02	; 2
     fa2:	41 e0       	ldi	r20, 0x01	; 1
     fa4:	0e 94 19 0c 	call	0x1832	; 0x1832 <MDIO_vSetPinVal>
				HLCD_vClearDisplay();
     fa8:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <HLCD_vClearDisplay>
				vSysteFrontEnd();
     fac:	0e 94 0b 08 	call	0x1016	; 0x1016 <vSysteFrontEnd>
				L_u8flag = 1 ;
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	8b 83       	std	Y+3, r24	; 0x03
     fb4:	1d c0       	rjmp	.+58     	; 0xff0 <vSysteOption+0xe2>
			}
			else if(L_u8DO==OFF)
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	82 30       	cpi	r24, 0x02	; 2
     fba:	89 f4       	brne	.+34     	; 0xfde <vSysteOption+0xd0>
			{
				G_u8TimerFlag = Close_DCmot ;
     fbc:	82 e0       	ldi	r24, 0x02	; 2
     fbe:	80 93 d0 00 	sts	0x00D0, r24
				MTIMERS_vSetInterval_Asynch(100,Timer_Isr);
     fc2:	23 ea       	ldi	r18, 0xA3	; 163
     fc4:	35 e0       	ldi	r19, 0x05	; 5
     fc6:	84 e6       	ldi	r24, 0x64	; 100
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	b9 01       	movw	r22, r18
     fcc:	0e 94 d5 08 	call	0x11aa	; 0x11aa <MTIMERS_vSetInterval_Asynch>
				HLCD_vClearDisplay();
     fd0:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <HLCD_vClearDisplay>
				vSysteFrontEnd();
     fd4:	0e 94 0b 08 	call	0x1016	; 0x1016 <vSysteFrontEnd>
				L_u8flag=1;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	8b 83       	std	Y+3, r24	; 0x03
     fdc:	09 c0       	rjmp	.+18     	; 0xff0 <vSysteOption+0xe2>
			}
			else if(L_u8DO== back_to_min)
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	83 30       	cpi	r24, 0x03	; 3
     fe2:	31 f4       	brne	.+12     	; 0xff0 <vSysteOption+0xe2>
			{
				HLCD_vClearDisplay();
     fe4:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <HLCD_vClearDisplay>
				vSysteFrontEnd();
     fe8:	0e 94 0b 08 	call	0x1016	; 0x1016 <vSysteFrontEnd>
				L_u8flag = 1 ;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	8b 83       	std	Y+3, r24	; 0x03
		HLCD_vPrintString("1:ON");
		HLCD_vGoToXY(0,7);
		HLCD_vPrintString("2:OFF");
		HLCD_vGoToXY(1,0);
		HLCD_vPrintString("3:back to min");
		while(L_u8flag==0)
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	88 23       	and	r24, r24
     ff4:	71 f2       	breq	.-100    	; 0xf92 <vSysteOption+0x84>
     ff6:	07 c0       	rjmp	.+14     	; 0x1006 <vSysteOption+0xf8>

		}
		break;

	case LDR:
		MADC_vSetCallback(Adc_Isr2);
     ff8:	85 ea       	ldi	r24, 0xA5	; 165
     ffa:	96 e0       	ldi	r25, 0x06	; 6
     ffc:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <MADC_vSetCallback>
		MADC_vStartConversion(CHANNEL_01);
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <MADC_vStartConversion>
		break;
	}

}
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <vSysteFrontEnd>:

void vSysteFrontEnd(void)
{
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	2e 97       	sbiw	r28, 0x0e	; 14
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
	HLCD_vClearDisplay();
    102a:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <HLCD_vClearDisplay>
	HLCD_vPrintString("pleas chose");
    102e:	8d e8       	ldi	r24, 0x8D	; 141
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 a9 14 	call	0x2952	; 0x2952 <HLCD_vPrintString>
	HLCD_vGoToXY(1,5);
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	65 e0       	ldi	r22, 0x05	; 5
    103a:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <HLCD_vGoToXY>
	HLCD_vPrintString("option");
    103e:	89 e9       	ldi	r24, 0x99	; 153
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0e 94 a9 14 	call	0x2952	; 0x2952 <HLCD_vPrintString>
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	aa e7       	ldi	r26, 0x7A	; 122
    104c:	b4 e4       	ldi	r27, 0x44	; 68
    104e:	8b 87       	std	Y+11, r24	; 0x0b
    1050:	9c 87       	std	Y+12, r25	; 0x0c
    1052:	ad 87       	std	Y+13, r26	; 0x0d
    1054:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1056:	6b 85       	ldd	r22, Y+11	; 0x0b
    1058:	7c 85       	ldd	r23, Y+12	; 0x0c
    105a:	8d 85       	ldd	r24, Y+13	; 0x0d
    105c:	9e 85       	ldd	r25, Y+14	; 0x0e
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	4a ef       	ldi	r20, 0xFA	; 250
    1064:	54 e4       	ldi	r21, 0x44	; 68
    1066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	8f 83       	std	Y+7, r24	; 0x07
    1070:	98 87       	std	Y+8, r25	; 0x08
    1072:	a9 87       	std	Y+9, r26	; 0x09
    1074:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1076:	6f 81       	ldd	r22, Y+7	; 0x07
    1078:	78 85       	ldd	r23, Y+8	; 0x08
    107a:	89 85       	ldd	r24, Y+9	; 0x09
    107c:	9a 85       	ldd	r25, Y+10	; 0x0a
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	40 e8       	ldi	r20, 0x80	; 128
    1084:	5f e3       	ldi	r21, 0x3F	; 63
    1086:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    108a:	88 23       	and	r24, r24
    108c:	2c f4       	brge	.+10     	; 0x1098 <vSysteFrontEnd+0x82>
		__ticks = 1;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	9e 83       	std	Y+6, r25	; 0x06
    1094:	8d 83       	std	Y+5, r24	; 0x05
    1096:	3f c0       	rjmp	.+126    	; 0x1116 <vSysteFrontEnd+0x100>
	else if (__tmp > 65535)
    1098:	6f 81       	ldd	r22, Y+7	; 0x07
    109a:	78 85       	ldd	r23, Y+8	; 0x08
    109c:	89 85       	ldd	r24, Y+9	; 0x09
    109e:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	3f ef       	ldi	r19, 0xFF	; 255
    10a4:	4f e7       	ldi	r20, 0x7F	; 127
    10a6:	57 e4       	ldi	r21, 0x47	; 71
    10a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10ac:	18 16       	cp	r1, r24
    10ae:	4c f5       	brge	.+82     	; 0x1102 <vSysteFrontEnd+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    10b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    10b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	40 e2       	ldi	r20, 0x20	; 32
    10be:	51 e4       	ldi	r21, 0x41	; 65
    10c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	bc 01       	movw	r22, r24
    10ca:	cd 01       	movw	r24, r26
    10cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	9e 83       	std	Y+6, r25	; 0x06
    10d6:	8d 83       	std	Y+5, r24	; 0x05
    10d8:	0f c0       	rjmp	.+30     	; 0x10f8 <vSysteFrontEnd+0xe2>
    10da:	88 ec       	ldi	r24, 0xC8	; 200
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	9c 83       	std	Y+4, r25	; 0x04
    10e0:	8b 83       	std	Y+3, r24	; 0x03
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	9c 81       	ldd	r25, Y+4	; 0x04
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	f1 f7       	brne	.-4      	; 0x10e6 <vSysteFrontEnd+0xd0>
    10ea:	9c 83       	std	Y+4, r25	; 0x04
    10ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ee:	8d 81       	ldd	r24, Y+5	; 0x05
    10f0:	9e 81       	ldd	r25, Y+6	; 0x06
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	9e 83       	std	Y+6, r25	; 0x06
    10f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f8:	8d 81       	ldd	r24, Y+5	; 0x05
    10fa:	9e 81       	ldd	r25, Y+6	; 0x06
    10fc:	00 97       	sbiw	r24, 0x00	; 0
    10fe:	69 f7       	brne	.-38     	; 0x10da <vSysteFrontEnd+0xc4>
    1100:	14 c0       	rjmp	.+40     	; 0x112a <vSysteFrontEnd+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1102:	6f 81       	ldd	r22, Y+7	; 0x07
    1104:	78 85       	ldd	r23, Y+8	; 0x08
    1106:	89 85       	ldd	r24, Y+9	; 0x09
    1108:	9a 85       	ldd	r25, Y+10	; 0x0a
    110a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	9e 83       	std	Y+6, r25	; 0x06
    1114:	8d 83       	std	Y+5, r24	; 0x05
    1116:	8d 81       	ldd	r24, Y+5	; 0x05
    1118:	9e 81       	ldd	r25, Y+6	; 0x06
    111a:	9a 83       	std	Y+2, r25	; 0x02
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	9a 81       	ldd	r25, Y+2	; 0x02
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	f1 f7       	brne	.-4      	; 0x1122 <vSysteFrontEnd+0x10c>
    1126:	9a 83       	std	Y+2, r25	; 0x02
    1128:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	HLCD_vClearDisplay();
    112a:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <HLCD_vClearDisplay>
	HLCD_vPrintString("1:temp");
    112e:	80 ea       	ldi	r24, 0xA0	; 160
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 a9 14 	call	0x2952	; 0x2952 <HLCD_vPrintString>
	HLCD_vGoToXY(0,7);
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	67 e0       	ldi	r22, 0x07	; 7
    113a:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <HLCD_vGoToXY>
	HLCD_vPrintString("2:DC_mot");
    113e:	87 ea       	ldi	r24, 0xA7	; 167
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	0e 94 a9 14 	call	0x2952	; 0x2952 <HLCD_vPrintString>
	HLCD_vGoToXY(1,0);
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	60 e0       	ldi	r22, 0x00	; 0
    114a:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <HLCD_vGoToXY>
	HLCD_vPrintString("3:LDR");
    114e:	80 eb       	ldi	r24, 0xB0	; 176
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 a9 14 	call	0x2952	; 0x2952 <HLCD_vPrintString>
}
    1156:	2e 96       	adiw	r28, 0x0e	; 14
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <MTIMERS_vInit>:
void (*G_TIM0_OVF_Callback)(void);
u32  G_u32IntervalCount;


void MTIMERS_vInit(void)
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
	 * Mode: Normal Overflow
	 * Interrupt: enable OVerflow intterupt
	 * Prescaler: No CLOCK -> timer stopped
	 */

	TCCR0 = 0b00000000 ;
    1170:	e3 e5       	ldi	r30, 0x53	; 83
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	10 82       	st	Z, r1
	SET_BIT(TIMSK, 0) ; //TOIE0
    1176:	a9 e5       	ldi	r26, 0x59	; 89
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e9 e5       	ldi	r30, 0x59	; 89
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	81 60       	ori	r24, 0x01	; 1
    1182:	8c 93       	st	X, r24



}
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <MTIMERS_vSetPreloadValue>:

void MTIMERS_vSetPreloadValue(/* Timer ID ?*/ u16 A_u16Preload)
{
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	00 d0       	rcall	.+0      	; 0x1190 <MTIMERS_vSetPreloadValue+0x6>
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = A_u16Preload ;
    1198:	e2 e5       	ldi	r30, 0x52	; 82
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	80 83       	st	Z, r24
}
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	08 95       	ret

000011aa <MTIMERS_vSetInterval_Asynch>:

void MTIMERS_vSetInterval_Asynch(u16 A_u16IntervalCounts, void (*A_fptr)(void))
{
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	00 d0       	rcall	.+0      	; 0x11b0 <MTIMERS_vSetInterval_Asynch+0x6>
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <MTIMERS_vSetInterval_Asynch+0x8>
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	9a 83       	std	Y+2, r25	; 0x02
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	7c 83       	std	Y+4, r23	; 0x04
    11bc:	6b 83       	std	Y+3, r22	; 0x03
	G_u32IntervalCount = A_u16IntervalCounts ;
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	9a 81       	ldd	r25, Y+2	; 0x02
    11c2:	cc 01       	movw	r24, r24
    11c4:	a0 e0       	ldi	r26, 0x00	; 0
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	80 93 d9 00 	sts	0x00D9, r24
    11cc:	90 93 da 00 	sts	0x00DA, r25
    11d0:	a0 93 db 00 	sts	0x00DB, r26
    11d4:	b0 93 dc 00 	sts	0x00DC, r27
	G_TIM0_OVF_Callback = A_fptr ;
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	9c 81       	ldd	r25, Y+4	; 0x04
    11dc:	90 93 d8 00 	sts	0x00D8, r25
    11e0:	80 93 d7 00 	sts	0x00D7, r24
	/*  start timer */
	MTIMERS_vStartTimer();
    11e4:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <MTIMERS_vStartTimer>

}
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <MTIMERS_vStartTimer>:

void MTIMERS_vStartTimer(/* Timer ID ?*/ )
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (TCCR0 & 0xF8) | (0b010) ;
    11fe:	a3 e5       	ldi	r26, 0x53	; 83
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e3 e5       	ldi	r30, 0x53	; 83
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	88 7f       	andi	r24, 0xF8	; 248
    120a:	82 60       	ori	r24, 0x02	; 2
    120c:	8c 93       	st	X, r24
}
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <MTIMERS_vStopTimer>:

void MTIMERS_vStopTimer(/* Timer ID ?*/)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (TCCR0 & 0xF8) | (0b000) ;
    121c:	a3 e5       	ldi	r26, 0x53	; 83
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e3 e5       	ldi	r30, 0x53	; 83
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	88 7f       	andi	r24, 0xF8	; 248
    1228:	8c 93       	st	X, r24
}
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <__vector_11>:


void __vector_11(void)  __attribute__((signal));
void __vector_11(void)
{
    1230:	1f 92       	push	r1
    1232:	0f 92       	push	r0
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	0f 92       	push	r0
    1238:	11 24       	eor	r1, r1
    123a:	2f 93       	push	r18
    123c:	3f 93       	push	r19
    123e:	4f 93       	push	r20
    1240:	5f 93       	push	r21
    1242:	6f 93       	push	r22
    1244:	7f 93       	push	r23
    1246:	8f 93       	push	r24
    1248:	9f 93       	push	r25
    124a:	af 93       	push	r26
    124c:	bf 93       	push	r27
    124e:	ef 93       	push	r30
    1250:	ff 93       	push	r31
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
	static u32 LS_u32Counter = 0;

	LS_u32Counter++ ;
    125a:	80 91 d3 00 	lds	r24, 0x00D3
    125e:	90 91 d4 00 	lds	r25, 0x00D4
    1262:	a0 91 d5 00 	lds	r26, 0x00D5
    1266:	b0 91 d6 00 	lds	r27, 0x00D6
    126a:	01 96       	adiw	r24, 0x01	; 1
    126c:	a1 1d       	adc	r26, r1
    126e:	b1 1d       	adc	r27, r1
    1270:	80 93 d3 00 	sts	0x00D3, r24
    1274:	90 93 d4 00 	sts	0x00D4, r25
    1278:	a0 93 d5 00 	sts	0x00D5, r26
    127c:	b0 93 d6 00 	sts	0x00D6, r27

	if(LS_u32Counter == G_u32IntervalCount)
    1280:	20 91 d3 00 	lds	r18, 0x00D3
    1284:	30 91 d4 00 	lds	r19, 0x00D4
    1288:	40 91 d5 00 	lds	r20, 0x00D5
    128c:	50 91 d6 00 	lds	r21, 0x00D6
    1290:	80 91 d9 00 	lds	r24, 0x00D9
    1294:	90 91 da 00 	lds	r25, 0x00DA
    1298:	a0 91 db 00 	lds	r26, 0x00DB
    129c:	b0 91 dc 00 	lds	r27, 0x00DC
    12a0:	28 17       	cp	r18, r24
    12a2:	39 07       	cpc	r19, r25
    12a4:	4a 07       	cpc	r20, r26
    12a6:	5b 07       	cpc	r21, r27
    12a8:	99 f4       	brne	.+38     	; 0x12d0 <__vector_11+0xa0>
	{
		if(G_TIM0_OVF_Callback != NULL)
    12aa:	80 91 d7 00 	lds	r24, 0x00D7
    12ae:	90 91 d8 00 	lds	r25, 0x00D8
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	69 f0       	breq	.+26     	; 0x12d0 <__vector_11+0xa0>
		{
			G_TIM0_OVF_Callback();
    12b6:	e0 91 d7 00 	lds	r30, 0x00D7
    12ba:	f0 91 d8 00 	lds	r31, 0x00D8
    12be:	09 95       	icall
			LS_u32Counter = 0;
    12c0:	10 92 d3 00 	sts	0x00D3, r1
    12c4:	10 92 d4 00 	sts	0x00D4, r1
    12c8:	10 92 d5 00 	sts	0x00D5, r1
    12cc:	10 92 d6 00 	sts	0x00D6, r1
		}
	}
}
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	ff 91       	pop	r31
    12d6:	ef 91       	pop	r30
    12d8:	bf 91       	pop	r27
    12da:	af 91       	pop	r26
    12dc:	9f 91       	pop	r25
    12de:	8f 91       	pop	r24
    12e0:	7f 91       	pop	r23
    12e2:	6f 91       	pop	r22
    12e4:	5f 91       	pop	r21
    12e6:	4f 91       	pop	r20
    12e8:	3f 91       	pop	r19
    12ea:	2f 91       	pop	r18
    12ec:	0f 90       	pop	r0
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	0f 90       	pop	r0
    12f2:	1f 90       	pop	r1
    12f4:	18 95       	reti

000012f6 <MGIE_vEnableGlobalInterrupt>:

#include "GIE_int.h"


void MGIE_vEnableGlobalInterrupt(void)
{
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, 7);
    12fe:	af e5       	ldi	r26, 0x5F	; 95
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	ef e5       	ldi	r30, 0x5F	; 95
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	80 68       	ori	r24, 0x80	; 128
    130a:	8c 93       	st	X, r24
}
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <MGIE_vDisableGlobalInterrupt>:

void MGIE_vDisableGlobalInterrupt(void)
{
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, 7);
    131a:	af e5       	ldi	r26, 0x5F	; 95
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	ef e5       	ldi	r30, 0x5F	; 95
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	8f 77       	andi	r24, 0x7F	; 127
    1326:	8c 93       	st	X, r24
}
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <MEXTI_vEnableInterrupt>:
#include "EXTI-int.h"
#include "EXTI-con.h"


void MEXTI_vEnableInterrupt(u8 A_u8ExtiLineNo)
{
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	00 d0       	rcall	.+0      	; 0x1334 <MEXTI_vEnableInterrupt+0x6>
    1334:	0f 92       	push	r0
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8ExtiLineNo)
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	3b 83       	std	Y+3, r19	; 0x03
    1344:	2a 83       	std	Y+2, r18	; 0x02
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	9b 81       	ldd	r25, Y+3	; 0x03
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	91 05       	cpc	r25, r1
    134e:	b1 f0       	breq	.+44     	; 0x137c <MEXTI_vEnableInterrupt+0x4e>
    1350:	2a 81       	ldd	r18, Y+2	; 0x02
    1352:	3b 81       	ldd	r19, Y+3	; 0x03
    1354:	22 30       	cpi	r18, 0x02	; 2
    1356:	31 05       	cpc	r19, r1
    1358:	f1 f0       	breq	.+60     	; 0x1396 <MEXTI_vEnableInterrupt+0x68>
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	9b 81       	ldd	r25, Y+3	; 0x03
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	31 f5       	brne	.+76     	; 0x13ae <MEXTI_vEnableInterrupt+0x80>
	{
	case EXTI_INT0:
		SET_BIT(GICR,6);
    1362:	ab e5       	ldi	r26, 0x5B	; 91
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	eb e5       	ldi	r30, 0x5B	; 91
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	80 64       	ori	r24, 0x40	; 64
    136e:	8c 93       	st	X, r24
		MDIO_vSetPinDir(DIO_PORTD,DIO_PIN2,DIO_INPUT);
    1370:	83 e0       	ldi	r24, 0x03	; 3
    1372:	62 e0       	ldi	r22, 0x02	; 2
    1374:	40 e0       	ldi	r20, 0x00	; 0
    1376:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_vSetPinDir>
    137a:	19 c0       	rjmp	.+50     	; 0x13ae <MEXTI_vEnableInterrupt+0x80>
		break;
	case EXTI_INT1:
		SET_BIT(GICR,7);
    137c:	ab e5       	ldi	r26, 0x5B	; 91
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	eb e5       	ldi	r30, 0x5B	; 91
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	80 68       	ori	r24, 0x80	; 128
    1388:	8c 93       	st	X, r24
		MDIO_vSetPinDir(DIO_PORTD,DIO_PIN3,DIO_INPUT);
    138a:	83 e0       	ldi	r24, 0x03	; 3
    138c:	63 e0       	ldi	r22, 0x03	; 3
    138e:	40 e0       	ldi	r20, 0x00	; 0
    1390:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_vSetPinDir>
    1394:	0c c0       	rjmp	.+24     	; 0x13ae <MEXTI_vEnableInterrupt+0x80>
		break;
	case EXTI_INT2:
		SET_BIT(GICR,5);
    1396:	ab e5       	ldi	r26, 0x5B	; 91
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	eb e5       	ldi	r30, 0x5B	; 91
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	80 62       	ori	r24, 0x20	; 32
    13a2:	8c 93       	st	X, r24
		MDIO_vSetPinDir(DIO_PORTB,DIO_PIN2,DIO_INPUT);
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	62 e0       	ldi	r22, 0x02	; 2
    13a8:	40 e0       	ldi	r20, 0x00	; 0
    13aa:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_vSetPinDir>
		break;

	}

}
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <MEXTI_vDisableInterrupt>:
void MEXTI_vDisableInterrupt(u8 A_u8ExtiLineNo)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <MEXTI_vDisableInterrupt+0x6>
    13c0:	0f 92       	push	r0
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8ExtiLineNo)
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	3b 83       	std	Y+3, r19	; 0x03
    13d0:	2a 83       	std	Y+2, r18	; 0x02
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	9b 81       	ldd	r25, Y+3	; 0x03
    13d6:	81 30       	cpi	r24, 0x01	; 1
    13d8:	91 05       	cpc	r25, r1
    13da:	89 f0       	breq	.+34     	; 0x13fe <MEXTI_vDisableInterrupt+0x44>
    13dc:	2a 81       	ldd	r18, Y+2	; 0x02
    13de:	3b 81       	ldd	r19, Y+3	; 0x03
    13e0:	22 30       	cpi	r18, 0x02	; 2
    13e2:	31 05       	cpc	r19, r1
    13e4:	a1 f0       	breq	.+40     	; 0x140e <MEXTI_vDisableInterrupt+0x54>
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	b9 f4       	brne	.+46     	; 0x141c <MEXTI_vDisableInterrupt+0x62>
	{
	case EXTI_INT0:
		CLR_BIT(GICR,6);
    13ee:	ab e5       	ldi	r26, 0x5B	; 91
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	eb e5       	ldi	r30, 0x5B	; 91
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	8f 7b       	andi	r24, 0xBF	; 191
    13fa:	8c 93       	st	X, r24
    13fc:	0f c0       	rjmp	.+30     	; 0x141c <MEXTI_vDisableInterrupt+0x62>
		break;
	case EXTI_INT1:
		CLR_BIT(GICR,7);
    13fe:	ab e5       	ldi	r26, 0x5B	; 91
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	eb e5       	ldi	r30, 0x5B	; 91
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	8f 77       	andi	r24, 0x7F	; 127
    140a:	8c 93       	st	X, r24
    140c:	07 c0       	rjmp	.+14     	; 0x141c <MEXTI_vDisableInterrupt+0x62>
		break;
	case EXTI_INT2:
		CLR_BIT(GICR,5);
    140e:	ab e5       	ldi	r26, 0x5B	; 91
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	eb e5       	ldi	r30, 0x5B	; 91
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	8f 7d       	andi	r24, 0xDF	; 223
    141a:	8c 93       	st	X, r24
		break;

	}
}
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <MEXTI_vSetSenseControl>:
void MEXTI_vSetSenseControl(u8 A_u8ExtiLineNo, u8 A_u8SenseCtrl)
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	2a 97       	sbiw	r28, 0x0a	; 10
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8ExtiLineNo)
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	3a 87       	std	Y+10, r19	; 0x0a
    1448:	29 87       	std	Y+9, r18	; 0x09
    144a:	89 85       	ldd	r24, Y+9	; 0x09
    144c:	9a 85       	ldd	r25, Y+10	; 0x0a
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	91 05       	cpc	r25, r1
    1452:	09 f4       	brne	.+2      	; 0x1456 <MEXTI_vSetSenseControl+0x2e>
    1454:	66 c0       	rjmp	.+204    	; 0x1522 <MEXTI_vSetSenseControl+0xfa>
    1456:	29 85       	ldd	r18, Y+9	; 0x09
    1458:	3a 85       	ldd	r19, Y+10	; 0x0a
    145a:	22 30       	cpi	r18, 0x02	; 2
    145c:	31 05       	cpc	r19, r1
    145e:	09 f4       	brne	.+2      	; 0x1462 <MEXTI_vSetSenseControl+0x3a>
    1460:	bb c0       	rjmp	.+374    	; 0x15d8 <MEXTI_vSetSenseControl+0x1b0>
    1462:	89 85       	ldd	r24, Y+9	; 0x09
    1464:	9a 85       	ldd	r25, Y+10	; 0x0a
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	09 f0       	breq	.+2      	; 0x146c <MEXTI_vSetSenseControl+0x44>
    146a:	da c0       	rjmp	.+436    	; 0x1620 <MEXTI_vSetSenseControl+0x1f8>
	{
	case EXTI_INT0 :
		switch(A_u8SenseCtrl)
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	38 87       	std	Y+8, r19	; 0x08
    1474:	2f 83       	std	Y+7, r18	; 0x07
    1476:	8f 81       	ldd	r24, Y+7	; 0x07
    1478:	98 85       	ldd	r25, Y+8	; 0x08
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	91 05       	cpc	r25, r1
    147e:	21 f1       	breq	.+72     	; 0x14c8 <MEXTI_vSetSenseControl+0xa0>
    1480:	2f 81       	ldd	r18, Y+7	; 0x07
    1482:	38 85       	ldd	r19, Y+8	; 0x08
    1484:	22 30       	cpi	r18, 0x02	; 2
    1486:	31 05       	cpc	r19, r1
    1488:	2c f4       	brge	.+10     	; 0x1494 <MEXTI_vSetSenseControl+0x6c>
    148a:	8f 81       	ldd	r24, Y+7	; 0x07
    148c:	98 85       	ldd	r25, Y+8	; 0x08
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	61 f0       	breq	.+24     	; 0x14aa <MEXTI_vSetSenseControl+0x82>
    1492:	c6 c0       	rjmp	.+396    	; 0x1620 <MEXTI_vSetSenseControl+0x1f8>
    1494:	2f 81       	ldd	r18, Y+7	; 0x07
    1496:	38 85       	ldd	r19, Y+8	; 0x08
    1498:	22 30       	cpi	r18, 0x02	; 2
    149a:	31 05       	cpc	r19, r1
    149c:	21 f1       	breq	.+72     	; 0x14e6 <MEXTI_vSetSenseControl+0xbe>
    149e:	8f 81       	ldd	r24, Y+7	; 0x07
    14a0:	98 85       	ldd	r25, Y+8	; 0x08
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	91 05       	cpc	r25, r1
    14a6:	71 f1       	breq	.+92     	; 0x1504 <MEXTI_vSetSenseControl+0xdc>
    14a8:	bb c0       	rjmp	.+374    	; 0x1620 <MEXTI_vSetSenseControl+0x1f8>
		{
		case EXTI_FALLING_EDGE :
			CLR_BIT(MCUCR,0);
    14aa:	a5 e5       	ldi	r26, 0x55	; 85
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e5 e5       	ldi	r30, 0x55	; 85
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8e 7f       	andi	r24, 0xFE	; 254
    14b6:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    14b8:	a5 e5       	ldi	r26, 0x55	; 85
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e5 e5       	ldi	r30, 0x55	; 85
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	82 60       	ori	r24, 0x02	; 2
    14c4:	8c 93       	st	X, r24
    14c6:	ac c0       	rjmp	.+344    	; 0x1620 <MEXTI_vSetSenseControl+0x1f8>
			break;
		case EXTI_RISING_EDGE :
			SET_BIT(MCUCR,1);
    14c8:	a5 e5       	ldi	r26, 0x55	; 85
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e5 e5       	ldi	r30, 0x55	; 85
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	82 60       	ori	r24, 0x02	; 2
    14d4:	8c 93       	st	X, r24
			SET_BIT(MCUCR,0);
    14d6:	a5 e5       	ldi	r26, 0x55	; 85
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e5 e5       	ldi	r30, 0x55	; 85
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	81 60       	ori	r24, 0x01	; 1
    14e2:	8c 93       	st	X, r24
    14e4:	9d c0       	rjmp	.+314    	; 0x1620 <MEXTI_vSetSenseControl+0x1f8>
			break;
		case EXTI_LOW :
			CLR_BIT(MCUCR,1);
    14e6:	a5 e5       	ldi	r26, 0x55	; 85
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e5 e5       	ldi	r30, 0x55	; 85
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	8d 7f       	andi	r24, 0xFD	; 253
    14f2:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,0);
    14f4:	a5 e5       	ldi	r26, 0x55	; 85
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e5 e5       	ldi	r30, 0x55	; 85
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	8e 7f       	andi	r24, 0xFE	; 254
    1500:	8c 93       	st	X, r24
    1502:	8e c0       	rjmp	.+284    	; 0x1620 <MEXTI_vSetSenseControl+0x1f8>
			break;
		case EXTI_ANY_CHANGE :
			CLR_BIT(MCUCR,1);
    1504:	a5 e5       	ldi	r26, 0x55	; 85
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e5 e5       	ldi	r30, 0x55	; 85
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	8d 7f       	andi	r24, 0xFD	; 253
    1510:	8c 93       	st	X, r24
			SET_BIT(MCUCR,0);
    1512:	a5 e5       	ldi	r26, 0x55	; 85
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e5 e5       	ldi	r30, 0x55	; 85
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	81 60       	ori	r24, 0x01	; 1
    151e:	8c 93       	st	X, r24
    1520:	7f c0       	rjmp	.+254    	; 0x1620 <MEXTI_vSetSenseControl+0x1f8>
			break;
		}
		break;

	case EXTI_INT1 :
		switch(A_u8SenseCtrl)
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	3e 83       	std	Y+6, r19	; 0x06
    152a:	2d 83       	std	Y+5, r18	; 0x05
    152c:	8d 81       	ldd	r24, Y+5	; 0x05
    152e:	9e 81       	ldd	r25, Y+6	; 0x06
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	91 05       	cpc	r25, r1
    1534:	21 f1       	breq	.+72     	; 0x157e <MEXTI_vSetSenseControl+0x156>
    1536:	2d 81       	ldd	r18, Y+5	; 0x05
    1538:	3e 81       	ldd	r19, Y+6	; 0x06
    153a:	22 30       	cpi	r18, 0x02	; 2
    153c:	31 05       	cpc	r19, r1
    153e:	2c f4       	brge	.+10     	; 0x154a <MEXTI_vSetSenseControl+0x122>
    1540:	8d 81       	ldd	r24, Y+5	; 0x05
    1542:	9e 81       	ldd	r25, Y+6	; 0x06
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	61 f0       	breq	.+24     	; 0x1560 <MEXTI_vSetSenseControl+0x138>
    1548:	6b c0       	rjmp	.+214    	; 0x1620 <MEXTI_vSetSenseControl+0x1f8>
    154a:	2d 81       	ldd	r18, Y+5	; 0x05
    154c:	3e 81       	ldd	r19, Y+6	; 0x06
    154e:	22 30       	cpi	r18, 0x02	; 2
    1550:	31 05       	cpc	r19, r1
    1552:	21 f1       	breq	.+72     	; 0x159c <MEXTI_vSetSenseControl+0x174>
    1554:	8d 81       	ldd	r24, Y+5	; 0x05
    1556:	9e 81       	ldd	r25, Y+6	; 0x06
    1558:	83 30       	cpi	r24, 0x03	; 3
    155a:	91 05       	cpc	r25, r1
    155c:	71 f1       	breq	.+92     	; 0x15ba <MEXTI_vSetSenseControl+0x192>
    155e:	60 c0       	rjmp	.+192    	; 0x1620 <MEXTI_vSetSenseControl+0x1f8>
		{
		case EXTI_FALLING_EDGE :
				CLR_BIT(MCUCR,2);
    1560:	a5 e5       	ldi	r26, 0x55	; 85
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e5 e5       	ldi	r30, 0x55	; 85
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	8b 7f       	andi	r24, 0xFB	; 251
    156c:	8c 93       	st	X, r24
				SET_BIT(MCUCR,3);
    156e:	a5 e5       	ldi	r26, 0x55	; 85
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e5 e5       	ldi	r30, 0x55	; 85
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	88 60       	ori	r24, 0x08	; 8
    157a:	8c 93       	st	X, r24
    157c:	51 c0       	rjmp	.+162    	; 0x1620 <MEXTI_vSetSenseControl+0x1f8>
				break;
		case EXTI_RISING_EDGE :
				SET_BIT(MCUCR,2);
    157e:	a5 e5       	ldi	r26, 0x55	; 85
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e5 e5       	ldi	r30, 0x55	; 85
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	84 60       	ori	r24, 0x04	; 4
    158a:	8c 93       	st	X, r24
				SET_BIT(MCUCR,3);
    158c:	a5 e5       	ldi	r26, 0x55	; 85
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e5 e5       	ldi	r30, 0x55	; 85
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	88 60       	ori	r24, 0x08	; 8
    1598:	8c 93       	st	X, r24
    159a:	42 c0       	rjmp	.+132    	; 0x1620 <MEXTI_vSetSenseControl+0x1f8>
				break;
		case EXTI_LOW :
				CLR_BIT(MCUCR,2);
    159c:	a5 e5       	ldi	r26, 0x55	; 85
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e5 e5       	ldi	r30, 0x55	; 85
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	8b 7f       	andi	r24, 0xFB	; 251
    15a8:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,3);
    15aa:	a5 e5       	ldi	r26, 0x55	; 85
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e5 e5       	ldi	r30, 0x55	; 85
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	87 7f       	andi	r24, 0xF7	; 247
    15b6:	8c 93       	st	X, r24
    15b8:	33 c0       	rjmp	.+102    	; 0x1620 <MEXTI_vSetSenseControl+0x1f8>
				break;
		case EXTI_ANY_CHANGE :
				CLR_BIT(MCUCR,3);
    15ba:	a5 e5       	ldi	r26, 0x55	; 85
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e5 e5       	ldi	r30, 0x55	; 85
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	87 7f       	andi	r24, 0xF7	; 247
    15c6:	8c 93       	st	X, r24
				SET_BIT(MCUCR,2);
    15c8:	a5 e5       	ldi	r26, 0x55	; 85
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e5 e5       	ldi	r30, 0x55	; 85
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	84 60       	ori	r24, 0x04	; 4
    15d4:	8c 93       	st	X, r24
    15d6:	24 c0       	rjmp	.+72     	; 0x1620 <MEXTI_vSetSenseControl+0x1f8>
				break;
		}
		break;

	case EXTI_INT2:
		if((A_u8SenseCtrl==EXTI_RISING_EDGE)||(A_u8SenseCtrl==EXTI_FALLING_EDGE))
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	19 f0       	breq	.+6      	; 0x15e4 <MEXTI_vSetSenseControl+0x1bc>
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	88 23       	and	r24, r24
    15e2:	f1 f4       	brne	.+60     	; 0x1620 <MEXTI_vSetSenseControl+0x1f8>
		{
		switch(A_u8SenseCtrl)
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	3c 83       	std	Y+4, r19	; 0x04
    15ec:	2b 83       	std	Y+3, r18	; 0x03
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	9c 81       	ldd	r25, Y+4	; 0x04
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	31 f0       	breq	.+12     	; 0x1602 <MEXTI_vSetSenseControl+0x1da>
    15f6:	2b 81       	ldd	r18, Y+3	; 0x03
    15f8:	3c 81       	ldd	r19, Y+4	; 0x04
    15fa:	21 30       	cpi	r18, 0x01	; 1
    15fc:	31 05       	cpc	r19, r1
    15fe:	49 f0       	breq	.+18     	; 0x1612 <MEXTI_vSetSenseControl+0x1ea>
    1600:	0f c0       	rjmp	.+30     	; 0x1620 <MEXTI_vSetSenseControl+0x1f8>
		{
		case EXTI_FALLING_EDGE:
					CLR_BIT(MCUCSR,6);
    1602:	a4 e5       	ldi	r26, 0x54	; 84
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e4 e5       	ldi	r30, 0x54	; 84
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	8f 7b       	andi	r24, 0xBF	; 191
    160e:	8c 93       	st	X, r24
    1610:	07 c0       	rjmp	.+14     	; 0x1620 <MEXTI_vSetSenseControl+0x1f8>
					break;
		case EXTI_RISING_EDGE:
					SET_BIT(MCUCSR,6);
    1612:	a4 e5       	ldi	r26, 0x54	; 84
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e4 e5       	ldi	r30, 0x54	; 84
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	80 64       	ori	r24, 0x40	; 64
    161e:	8c 93       	st	X, r24
					break;
		}
		}
		break;
	}
}
    1620:	2a 96       	adiw	r28, 0x0a	; 10
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <MDIO_vSetPinDir>:
#include "DIO-prv.h"



void MDIO_vSetPinDir(u8 A_u8PortNo , u8 A_u8PinNo , u8 A_u8Dir)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	27 97       	sbiw	r28, 0x07	; 7
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	89 83       	std	Y+1, r24	; 0x01
    1648:	6a 83       	std	Y+2, r22	; 0x02
    164a:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8Dir == DIO_OUTPUT)
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	09 f0       	breq	.+2      	; 0x1654 <MDIO_vSetPinDir+0x22>
    1652:	6f c0       	rjmp	.+222    	; 0x1732 <MDIO_vSetPinDir+0x100>
	{
		switch(A_u8PortNo)
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	3f 83       	std	Y+7, r19	; 0x07
    165c:	2e 83       	std	Y+6, r18	; 0x06
    165e:	8e 81       	ldd	r24, Y+6	; 0x06
    1660:	9f 81       	ldd	r25, Y+7	; 0x07
    1662:	81 30       	cpi	r24, 0x01	; 1
    1664:	91 05       	cpc	r25, r1
    1666:	49 f1       	breq	.+82     	; 0x16ba <MDIO_vSetPinDir+0x88>
    1668:	2e 81       	ldd	r18, Y+6	; 0x06
    166a:	3f 81       	ldd	r19, Y+7	; 0x07
    166c:	22 30       	cpi	r18, 0x02	; 2
    166e:	31 05       	cpc	r19, r1
    1670:	2c f4       	brge	.+10     	; 0x167c <MDIO_vSetPinDir+0x4a>
    1672:	8e 81       	ldd	r24, Y+6	; 0x06
    1674:	9f 81       	ldd	r25, Y+7	; 0x07
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	61 f0       	breq	.+24     	; 0x1692 <MDIO_vSetPinDir+0x60>
    167a:	d2 c0       	rjmp	.+420    	; 0x1820 <MDIO_vSetPinDir+0x1ee>
    167c:	2e 81       	ldd	r18, Y+6	; 0x06
    167e:	3f 81       	ldd	r19, Y+7	; 0x07
    1680:	22 30       	cpi	r18, 0x02	; 2
    1682:	31 05       	cpc	r19, r1
    1684:	71 f1       	breq	.+92     	; 0x16e2 <MDIO_vSetPinDir+0xb0>
    1686:	8e 81       	ldd	r24, Y+6	; 0x06
    1688:	9f 81       	ldd	r25, Y+7	; 0x07
    168a:	83 30       	cpi	r24, 0x03	; 3
    168c:	91 05       	cpc	r25, r1
    168e:	e9 f1       	breq	.+122    	; 0x170a <MDIO_vSetPinDir+0xd8>
    1690:	c7 c0       	rjmp	.+398    	; 0x1820 <MDIO_vSetPinDir+0x1ee>
		{
		case DIO_PORTA :
			SET_BIT(DDRA , A_u8PinNo );
    1692:	aa e3       	ldi	r26, 0x3A	; 58
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	ea e3       	ldi	r30, 0x3A	; 58
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <MDIO_vSetPinDir+0x7e>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <MDIO_vSetPinDir+0x7a>
    16b4:	84 2b       	or	r24, r20
    16b6:	8c 93       	st	X, r24
    16b8:	b3 c0       	rjmp	.+358    	; 0x1820 <MDIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTB :
			SET_BIT(DDRB , A_u8PinNo );
    16ba:	a7 e3       	ldi	r26, 0x37	; 55
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e7 e3       	ldi	r30, 0x37	; 55
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <MDIO_vSetPinDir+0xa6>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <MDIO_vSetPinDir+0xa2>
    16dc:	84 2b       	or	r24, r20
    16de:	8c 93       	st	X, r24
    16e0:	9f c0       	rjmp	.+318    	; 0x1820 <MDIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTC:
			SET_BIT(DDRC , A_u8PinNo );
    16e2:	a4 e3       	ldi	r26, 0x34	; 52
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e4 e3       	ldi	r30, 0x34	; 52
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 2e       	mov	r0, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <MDIO_vSetPinDir+0xce>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <MDIO_vSetPinDir+0xca>
    1704:	84 2b       	or	r24, r20
    1706:	8c 93       	st	X, r24
    1708:	8b c0       	rjmp	.+278    	; 0x1820 <MDIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTD :
			SET_BIT(DDRD , A_u8PinNo );
    170a:	a1 e3       	ldi	r26, 0x31	; 49
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e1 e3       	ldi	r30, 0x31	; 49
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	02 2e       	mov	r0, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <MDIO_vSetPinDir+0xf6>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	0a 94       	dec	r0
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <MDIO_vSetPinDir+0xf2>
    172c:	84 2b       	or	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	77 c0       	rjmp	.+238    	; 0x1820 <MDIO_vSetPinDir+0x1ee>
			break;
		}
	}
	else if(A_u8Dir == DIO_INPUT)
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	88 23       	and	r24, r24
    1736:	09 f0       	breq	.+2      	; 0x173a <MDIO_vSetPinDir+0x108>
    1738:	73 c0       	rjmp	.+230    	; 0x1820 <MDIO_vSetPinDir+0x1ee>
	{
		switch(A_u8PortNo)
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	3d 83       	std	Y+5, r19	; 0x05
    1742:	2c 83       	std	Y+4, r18	; 0x04
    1744:	8c 81       	ldd	r24, Y+4	; 0x04
    1746:	9d 81       	ldd	r25, Y+5	; 0x05
    1748:	81 30       	cpi	r24, 0x01	; 1
    174a:	91 05       	cpc	r25, r1
    174c:	59 f1       	breq	.+86     	; 0x17a4 <MDIO_vSetPinDir+0x172>
    174e:	2c 81       	ldd	r18, Y+4	; 0x04
    1750:	3d 81       	ldd	r19, Y+5	; 0x05
    1752:	22 30       	cpi	r18, 0x02	; 2
    1754:	31 05       	cpc	r19, r1
    1756:	2c f4       	brge	.+10     	; 0x1762 <MDIO_vSetPinDir+0x130>
    1758:	8c 81       	ldd	r24, Y+4	; 0x04
    175a:	9d 81       	ldd	r25, Y+5	; 0x05
    175c:	00 97       	sbiw	r24, 0x00	; 0
    175e:	69 f0       	breq	.+26     	; 0x177a <MDIO_vSetPinDir+0x148>
    1760:	5f c0       	rjmp	.+190    	; 0x1820 <MDIO_vSetPinDir+0x1ee>
    1762:	2c 81       	ldd	r18, Y+4	; 0x04
    1764:	3d 81       	ldd	r19, Y+5	; 0x05
    1766:	22 30       	cpi	r18, 0x02	; 2
    1768:	31 05       	cpc	r19, r1
    176a:	89 f1       	breq	.+98     	; 0x17ce <MDIO_vSetPinDir+0x19c>
    176c:	8c 81       	ldd	r24, Y+4	; 0x04
    176e:	9d 81       	ldd	r25, Y+5	; 0x05
    1770:	83 30       	cpi	r24, 0x03	; 3
    1772:	91 05       	cpc	r25, r1
    1774:	09 f4       	brne	.+2      	; 0x1778 <MDIO_vSetPinDir+0x146>
    1776:	40 c0       	rjmp	.+128    	; 0x17f8 <MDIO_vSetPinDir+0x1c6>
    1778:	53 c0       	rjmp	.+166    	; 0x1820 <MDIO_vSetPinDir+0x1ee>
		{
		case DIO_PORTA :
			CLR_BIT(DDRA , A_u8PinNo );
    177a:	aa e3       	ldi	r26, 0x3A	; 58
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	ea e3       	ldi	r30, 0x3A	; 58
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	48 2f       	mov	r20, r24
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 2e       	mov	r0, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <MDIO_vSetPinDir+0x166>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	0a 94       	dec	r0
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <MDIO_vSetPinDir+0x162>
    179c:	80 95       	com	r24
    179e:	84 23       	and	r24, r20
    17a0:	8c 93       	st	X, r24
    17a2:	3e c0       	rjmp	.+124    	; 0x1820 <MDIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTB :
			CLR_BIT(DDRB , A_u8PinNo );
    17a4:	a7 e3       	ldi	r26, 0x37	; 55
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e7 e3       	ldi	r30, 0x37	; 55
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	48 2f       	mov	r20, r24
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	28 2f       	mov	r18, r24
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	02 2e       	mov	r0, r18
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <MDIO_vSetPinDir+0x190>
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	0a 94       	dec	r0
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <MDIO_vSetPinDir+0x18c>
    17c6:	80 95       	com	r24
    17c8:	84 23       	and	r24, r20
    17ca:	8c 93       	st	X, r24
    17cc:	29 c0       	rjmp	.+82     	; 0x1820 <MDIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTC :
			CLR_BIT(DDRC , A_u8PinNo );
    17ce:	a4 e3       	ldi	r26, 0x34	; 52
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e4 e3       	ldi	r30, 0x34	; 52
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	48 2f       	mov	r20, r24
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	02 2e       	mov	r0, r18
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <MDIO_vSetPinDir+0x1ba>
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	0a 94       	dec	r0
    17ee:	e2 f7       	brpl	.-8      	; 0x17e8 <MDIO_vSetPinDir+0x1b6>
    17f0:	80 95       	com	r24
    17f2:	84 23       	and	r24, r20
    17f4:	8c 93       	st	X, r24
    17f6:	14 c0       	rjmp	.+40     	; 0x1820 <MDIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTD :
			CLR_BIT(DDRD , A_u8PinNo );
    17f8:	a1 e3       	ldi	r26, 0x31	; 49
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e1 e3       	ldi	r30, 0x31	; 49
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	48 2f       	mov	r20, r24
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	02 2e       	mov	r0, r18
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <MDIO_vSetPinDir+0x1e4>
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	0a 94       	dec	r0
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <MDIO_vSetPinDir+0x1e0>
    181a:	80 95       	com	r24
    181c:	84 23       	and	r24, r20
    181e:	8c 93       	st	X, r24
			break;
		}
	}
}
    1820:	27 96       	adiw	r28, 0x07	; 7
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <MDIO_vSetPinVal>:

void MDIO_vSetPinVal(u8 A_u8PortNo ,u8 A_u8PinNo , u8 A_u8Val)
{
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	27 97       	sbiw	r28, 0x07	; 7
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	89 83       	std	Y+1, r24	; 0x01
    1848:	6a 83       	std	Y+2, r22	; 0x02
    184a:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8Val == DIO_HIGH)
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	81 30       	cpi	r24, 0x01	; 1
    1850:	09 f0       	breq	.+2      	; 0x1854 <MDIO_vSetPinVal+0x22>
    1852:	6f c0       	rjmp	.+222    	; 0x1932 <MDIO_vSetPinVal+0x100>
	{
		switch(A_u8PortNo)
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	3f 83       	std	Y+7, r19	; 0x07
    185c:	2e 83       	std	Y+6, r18	; 0x06
    185e:	8e 81       	ldd	r24, Y+6	; 0x06
    1860:	9f 81       	ldd	r25, Y+7	; 0x07
    1862:	81 30       	cpi	r24, 0x01	; 1
    1864:	91 05       	cpc	r25, r1
    1866:	49 f1       	breq	.+82     	; 0x18ba <MDIO_vSetPinVal+0x88>
    1868:	2e 81       	ldd	r18, Y+6	; 0x06
    186a:	3f 81       	ldd	r19, Y+7	; 0x07
    186c:	22 30       	cpi	r18, 0x02	; 2
    186e:	31 05       	cpc	r19, r1
    1870:	2c f4       	brge	.+10     	; 0x187c <MDIO_vSetPinVal+0x4a>
    1872:	8e 81       	ldd	r24, Y+6	; 0x06
    1874:	9f 81       	ldd	r25, Y+7	; 0x07
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	61 f0       	breq	.+24     	; 0x1892 <MDIO_vSetPinVal+0x60>
    187a:	d2 c0       	rjmp	.+420    	; 0x1a20 <MDIO_vSetPinVal+0x1ee>
    187c:	2e 81       	ldd	r18, Y+6	; 0x06
    187e:	3f 81       	ldd	r19, Y+7	; 0x07
    1880:	22 30       	cpi	r18, 0x02	; 2
    1882:	31 05       	cpc	r19, r1
    1884:	71 f1       	breq	.+92     	; 0x18e2 <MDIO_vSetPinVal+0xb0>
    1886:	8e 81       	ldd	r24, Y+6	; 0x06
    1888:	9f 81       	ldd	r25, Y+7	; 0x07
    188a:	83 30       	cpi	r24, 0x03	; 3
    188c:	91 05       	cpc	r25, r1
    188e:	e9 f1       	breq	.+122    	; 0x190a <MDIO_vSetPinVal+0xd8>
    1890:	c7 c0       	rjmp	.+398    	; 0x1a20 <MDIO_vSetPinVal+0x1ee>
		{
		case DIO_PORTA :
			SET_BIT(PORTA , A_u8PinNo );
    1892:	ab e3       	ldi	r26, 0x3B	; 59
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	eb e3       	ldi	r30, 0x3B	; 59
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	48 2f       	mov	r20, r24
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	02 2e       	mov	r0, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <MDIO_vSetPinVal+0x7e>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	0a 94       	dec	r0
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <MDIO_vSetPinVal+0x7a>
    18b4:	84 2b       	or	r24, r20
    18b6:	8c 93       	st	X, r24
    18b8:	b3 c0       	rjmp	.+358    	; 0x1a20 <MDIO_vSetPinVal+0x1ee>
			break;
		case DIO_PORTB :
			SET_BIT(PORTB, A_u8PinNo );
    18ba:	a8 e3       	ldi	r26, 0x38	; 56
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e8 e3       	ldi	r30, 0x38	; 56
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	48 2f       	mov	r20, r24
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	02 2e       	mov	r0, r18
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <MDIO_vSetPinVal+0xa6>
    18d4:	88 0f       	add	r24, r24
    18d6:	99 1f       	adc	r25, r25
    18d8:	0a 94       	dec	r0
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <MDIO_vSetPinVal+0xa2>
    18dc:	84 2b       	or	r24, r20
    18de:	8c 93       	st	X, r24
    18e0:	9f c0       	rjmp	.+318    	; 0x1a20 <MDIO_vSetPinVal+0x1ee>
			break;
		case DIO_PORTC:
			SET_BIT(PORTC , A_u8PinNo );
    18e2:	a5 e3       	ldi	r26, 0x35	; 53
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e5 e3       	ldi	r30, 0x35	; 53
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	48 2f       	mov	r20, r24
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	02 2e       	mov	r0, r18
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <MDIO_vSetPinVal+0xce>
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	0a 94       	dec	r0
    1902:	e2 f7       	brpl	.-8      	; 0x18fc <MDIO_vSetPinVal+0xca>
    1904:	84 2b       	or	r24, r20
    1906:	8c 93       	st	X, r24
    1908:	8b c0       	rjmp	.+278    	; 0x1a20 <MDIO_vSetPinVal+0x1ee>
			break;
		case DIO_PORTD :
			SET_BIT(PORTD , A_u8PinNo );
    190a:	a2 e3       	ldi	r26, 0x32	; 50
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e2 e3       	ldi	r30, 0x32	; 50
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	48 2f       	mov	r20, r24
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	02 2e       	mov	r0, r18
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <MDIO_vSetPinVal+0xf6>
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	0a 94       	dec	r0
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <MDIO_vSetPinVal+0xf2>
    192c:	84 2b       	or	r24, r20
    192e:	8c 93       	st	X, r24
    1930:	77 c0       	rjmp	.+238    	; 0x1a20 <MDIO_vSetPinVal+0x1ee>
			break;
		}
	}
	else if(A_u8Val == DIO_LOW)
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	88 23       	and	r24, r24
    1936:	09 f0       	breq	.+2      	; 0x193a <MDIO_vSetPinVal+0x108>
    1938:	73 c0       	rjmp	.+230    	; 0x1a20 <MDIO_vSetPinVal+0x1ee>
	{
		switch(A_u8PortNo)
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	3d 83       	std	Y+5, r19	; 0x05
    1942:	2c 83       	std	Y+4, r18	; 0x04
    1944:	8c 81       	ldd	r24, Y+4	; 0x04
    1946:	9d 81       	ldd	r25, Y+5	; 0x05
    1948:	81 30       	cpi	r24, 0x01	; 1
    194a:	91 05       	cpc	r25, r1
    194c:	59 f1       	breq	.+86     	; 0x19a4 <MDIO_vSetPinVal+0x172>
    194e:	2c 81       	ldd	r18, Y+4	; 0x04
    1950:	3d 81       	ldd	r19, Y+5	; 0x05
    1952:	22 30       	cpi	r18, 0x02	; 2
    1954:	31 05       	cpc	r19, r1
    1956:	2c f4       	brge	.+10     	; 0x1962 <MDIO_vSetPinVal+0x130>
    1958:	8c 81       	ldd	r24, Y+4	; 0x04
    195a:	9d 81       	ldd	r25, Y+5	; 0x05
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	69 f0       	breq	.+26     	; 0x197a <MDIO_vSetPinVal+0x148>
    1960:	5f c0       	rjmp	.+190    	; 0x1a20 <MDIO_vSetPinVal+0x1ee>
    1962:	2c 81       	ldd	r18, Y+4	; 0x04
    1964:	3d 81       	ldd	r19, Y+5	; 0x05
    1966:	22 30       	cpi	r18, 0x02	; 2
    1968:	31 05       	cpc	r19, r1
    196a:	89 f1       	breq	.+98     	; 0x19ce <MDIO_vSetPinVal+0x19c>
    196c:	8c 81       	ldd	r24, Y+4	; 0x04
    196e:	9d 81       	ldd	r25, Y+5	; 0x05
    1970:	83 30       	cpi	r24, 0x03	; 3
    1972:	91 05       	cpc	r25, r1
    1974:	09 f4       	brne	.+2      	; 0x1978 <MDIO_vSetPinVal+0x146>
    1976:	40 c0       	rjmp	.+128    	; 0x19f8 <MDIO_vSetPinVal+0x1c6>
    1978:	53 c0       	rjmp	.+166    	; 0x1a20 <MDIO_vSetPinVal+0x1ee>
		{
		case DIO_PORTA :
			CLR_BIT(PORTA , A_u8PinNo );
    197a:	ab e3       	ldi	r26, 0x3B	; 59
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	eb e3       	ldi	r30, 0x3B	; 59
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	48 2f       	mov	r20, r24
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	02 2e       	mov	r0, r18
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <MDIO_vSetPinVal+0x166>
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	0a 94       	dec	r0
    199a:	e2 f7       	brpl	.-8      	; 0x1994 <MDIO_vSetPinVal+0x162>
    199c:	80 95       	com	r24
    199e:	84 23       	and	r24, r20
    19a0:	8c 93       	st	X, r24
    19a2:	3e c0       	rjmp	.+124    	; 0x1a20 <MDIO_vSetPinVal+0x1ee>
			break;
		case DIO_PORTB :
			CLR_BIT(PORTB , A_u8PinNo );
    19a4:	a8 e3       	ldi	r26, 0x38	; 56
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e8 e3       	ldi	r30, 0x38	; 56
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	48 2f       	mov	r20, r24
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	02 2e       	mov	r0, r18
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <MDIO_vSetPinVal+0x190>
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	0a 94       	dec	r0
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <MDIO_vSetPinVal+0x18c>
    19c6:	80 95       	com	r24
    19c8:	84 23       	and	r24, r20
    19ca:	8c 93       	st	X, r24
    19cc:	29 c0       	rjmp	.+82     	; 0x1a20 <MDIO_vSetPinVal+0x1ee>
			break;
		case DIO_PORTC :
			CLR_BIT(PORTC , A_u8PinNo );
    19ce:	a5 e3       	ldi	r26, 0x35	; 53
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	e5 e3       	ldi	r30, 0x35	; 53
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	48 2f       	mov	r20, r24
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	02 2e       	mov	r0, r18
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <MDIO_vSetPinVal+0x1ba>
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	0a 94       	dec	r0
    19ee:	e2 f7       	brpl	.-8      	; 0x19e8 <MDIO_vSetPinVal+0x1b6>
    19f0:	80 95       	com	r24
    19f2:	84 23       	and	r24, r20
    19f4:	8c 93       	st	X, r24
    19f6:	14 c0       	rjmp	.+40     	; 0x1a20 <MDIO_vSetPinVal+0x1ee>
			break;
		case DIO_PORTD :
			CLR_BIT(PORTD , A_u8PinNo );
    19f8:	a2 e3       	ldi	r26, 0x32	; 50
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e2 e3       	ldi	r30, 0x32	; 50
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	48 2f       	mov	r20, r24
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	02 2e       	mov	r0, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <MDIO_vSetPinVal+0x1e4>
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	0a 94       	dec	r0
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <MDIO_vSetPinVal+0x1e0>
    1a1a:	80 95       	com	r24
    1a1c:	84 23       	and	r24, r20
    1a1e:	8c 93       	st	X, r24
			break;
		}
	}

}
    1a20:	27 96       	adiw	r28, 0x07	; 7
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	cd bf       	out	0x3d, r28	; 61
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <MDIO_vTogPinVal>:

void MDIO_vTogPinVal(u8 A_u8PortNo ,u8 A_u8PinNo)
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <MDIO_vTogPinVal+0x6>
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <MDIO_vTogPinVal+0x8>
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    1a40:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNo)
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	28 2f       	mov	r18, r24
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	3c 83       	std	Y+4, r19	; 0x04
    1a4a:	2b 83       	std	Y+3, r18	; 0x03
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	91 05       	cpc	r25, r1
    1a54:	49 f1       	breq	.+82     	; 0x1aa8 <MDIO_vTogPinVal+0x76>
    1a56:	2b 81       	ldd	r18, Y+3	; 0x03
    1a58:	3c 81       	ldd	r19, Y+4	; 0x04
    1a5a:	22 30       	cpi	r18, 0x02	; 2
    1a5c:	31 05       	cpc	r19, r1
    1a5e:	2c f4       	brge	.+10     	; 0x1a6a <MDIO_vTogPinVal+0x38>
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	9c 81       	ldd	r25, Y+4	; 0x04
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	61 f0       	breq	.+24     	; 0x1a80 <MDIO_vTogPinVal+0x4e>
    1a68:	5a c0       	rjmp	.+180    	; 0x1b1e <MDIO_vTogPinVal+0xec>
    1a6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a6e:	22 30       	cpi	r18, 0x02	; 2
    1a70:	31 05       	cpc	r19, r1
    1a72:	71 f1       	breq	.+92     	; 0x1ad0 <MDIO_vTogPinVal+0x9e>
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	83 30       	cpi	r24, 0x03	; 3
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	e9 f1       	breq	.+122    	; 0x1af8 <MDIO_vTogPinVal+0xc6>
    1a7e:	4f c0       	rjmp	.+158    	; 0x1b1e <MDIO_vTogPinVal+0xec>
	{
	case DIO_PORTA :
		TOG_BIT(PORTA , A_u8PinNo );
    1a80:	ab e3       	ldi	r26, 0x3B	; 59
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	eb e3       	ldi	r30, 0x3B	; 59
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	48 2f       	mov	r20, r24
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	02 2e       	mov	r0, r18
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <MDIO_vTogPinVal+0x6c>
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	0a 94       	dec	r0
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <MDIO_vTogPinVal+0x68>
    1aa2:	84 27       	eor	r24, r20
    1aa4:	8c 93       	st	X, r24
    1aa6:	3b c0       	rjmp	.+118    	; 0x1b1e <MDIO_vTogPinVal+0xec>
		break;
	case DIO_PORTB :
		TOG_BIT(PORTB, A_u8PinNo );
    1aa8:	a8 e3       	ldi	r26, 0x38	; 56
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e8 e3       	ldi	r30, 0x38	; 56
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	48 2f       	mov	r20, r24
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	02 2e       	mov	r0, r18
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <MDIO_vTogPinVal+0x94>
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	0a 94       	dec	r0
    1ac8:	e2 f7       	brpl	.-8      	; 0x1ac2 <MDIO_vTogPinVal+0x90>
    1aca:	84 27       	eor	r24, r20
    1acc:	8c 93       	st	X, r24
    1ace:	27 c0       	rjmp	.+78     	; 0x1b1e <MDIO_vTogPinVal+0xec>
		break;
	case DIO_PORTC:
		TOG_BIT(PORTC , A_u8PinNo );
    1ad0:	a5 e3       	ldi	r26, 0x35	; 53
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e5 e3       	ldi	r30, 0x35	; 53
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	48 2f       	mov	r20, r24
    1adc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	02 2e       	mov	r0, r18
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <MDIO_vTogPinVal+0xbc>
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	0a 94       	dec	r0
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <MDIO_vTogPinVal+0xb8>
    1af2:	84 27       	eor	r24, r20
    1af4:	8c 93       	st	X, r24
    1af6:	13 c0       	rjmp	.+38     	; 0x1b1e <MDIO_vTogPinVal+0xec>
		break;
	case DIO_PORTD :
		TOG_BIT(PORTD , A_u8PinNo );
    1af8:	a2 e3       	ldi	r26, 0x32	; 50
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e2 e3       	ldi	r30, 0x32	; 50
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	48 2f       	mov	r20, r24
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	02 2e       	mov	r0, r18
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <MDIO_vTogPinVal+0xe4>
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	0a 94       	dec	r0
    1b18:	e2 f7       	brpl	.-8      	; 0x1b12 <MDIO_vTogPinVal+0xe0>
    1b1a:	84 27       	eor	r24, r20
    1b1c:	8c 93       	st	X, r24
		break;
	}
}
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <MDIO_u8GetPinVal>:

u8 MDIO_u8GetPinVal(u8 A_u8PortNo , u8 A_u8PinNo)
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <MDIO_u8GetPinVal+0x6>
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <MDIO_u8GetPinVal+0x8>
    1b34:	0f 92       	push	r0
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	8a 83       	std	Y+2, r24	; 0x02
    1b3c:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_PinVal = 0;
    1b3e:	19 82       	std	Y+1, r1	; 0x01

	switch(A_u8PortNo)
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	3d 83       	std	Y+5, r19	; 0x05
    1b48:	2c 83       	std	Y+4, r18	; 0x04
    1b4a:	4c 81       	ldd	r20, Y+4	; 0x04
    1b4c:	5d 81       	ldd	r21, Y+5	; 0x05
    1b4e:	41 30       	cpi	r20, 0x01	; 1
    1b50:	51 05       	cpc	r21, r1
    1b52:	41 f1       	breq	.+80     	; 0x1ba4 <MDIO_u8GetPinVal+0x78>
    1b54:	8c 81       	ldd	r24, Y+4	; 0x04
    1b56:	9d 81       	ldd	r25, Y+5	; 0x05
    1b58:	82 30       	cpi	r24, 0x02	; 2
    1b5a:	91 05       	cpc	r25, r1
    1b5c:	34 f4       	brge	.+12     	; 0x1b6a <MDIO_u8GetPinVal+0x3e>
    1b5e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b60:	3d 81       	ldd	r19, Y+5	; 0x05
    1b62:	21 15       	cp	r18, r1
    1b64:	31 05       	cpc	r19, r1
    1b66:	61 f0       	breq	.+24     	; 0x1b80 <MDIO_u8GetPinVal+0x54>
    1b68:	52 c0       	rjmp	.+164    	; 0x1c0e <MDIO_u8GetPinVal+0xe2>
    1b6a:	4c 81       	ldd	r20, Y+4	; 0x04
    1b6c:	5d 81       	ldd	r21, Y+5	; 0x05
    1b6e:	42 30       	cpi	r20, 0x02	; 2
    1b70:	51 05       	cpc	r21, r1
    1b72:	51 f1       	breq	.+84     	; 0x1bc8 <MDIO_u8GetPinVal+0x9c>
    1b74:	8c 81       	ldd	r24, Y+4	; 0x04
    1b76:	9d 81       	ldd	r25, Y+5	; 0x05
    1b78:	83 30       	cpi	r24, 0x03	; 3
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	b9 f1       	breq	.+110    	; 0x1bec <MDIO_u8GetPinVal+0xc0>
    1b7e:	47 c0       	rjmp	.+142    	; 0x1c0e <MDIO_u8GetPinVal+0xe2>
	{
	case DIO_PORTA :
		L_PinVal = GET_BIT(PINA , A_u8PinNo );
    1b80:	e9 e3       	ldi	r30, 0x39	; 57
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	88 2f       	mov	r24, r24
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	a9 01       	movw	r20, r18
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <MDIO_u8GetPinVal+0x6c>
    1b94:	55 95       	asr	r21
    1b96:	47 95       	ror	r20
    1b98:	8a 95       	dec	r24
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <MDIO_u8GetPinVal+0x68>
    1b9c:	ca 01       	movw	r24, r20
    1b9e:	81 70       	andi	r24, 0x01	; 1
    1ba0:	89 83       	std	Y+1, r24	; 0x01
    1ba2:	35 c0       	rjmp	.+106    	; 0x1c0e <MDIO_u8GetPinVal+0xe2>
		break;
	case DIO_PORTB :
		L_PinVal = GET_BIT(PINB , A_u8PinNo );
    1ba4:	e6 e3       	ldi	r30, 0x36	; 54
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	88 2f       	mov	r24, r24
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	a9 01       	movw	r20, r18
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <MDIO_u8GetPinVal+0x90>
    1bb8:	55 95       	asr	r21
    1bba:	47 95       	ror	r20
    1bbc:	8a 95       	dec	r24
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <MDIO_u8GetPinVal+0x8c>
    1bc0:	ca 01       	movw	r24, r20
    1bc2:	81 70       	andi	r24, 0x01	; 1
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	23 c0       	rjmp	.+70     	; 0x1c0e <MDIO_u8GetPinVal+0xe2>
		break;
	case DIO_PORTC :
		L_PinVal = GET_BIT(PINC , A_u8PinNo );
    1bc8:	e3 e3       	ldi	r30, 0x33	; 51
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	88 2f       	mov	r24, r24
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	a9 01       	movw	r20, r18
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <MDIO_u8GetPinVal+0xb4>
    1bdc:	55 95       	asr	r21
    1bde:	47 95       	ror	r20
    1be0:	8a 95       	dec	r24
    1be2:	e2 f7       	brpl	.-8      	; 0x1bdc <MDIO_u8GetPinVal+0xb0>
    1be4:	ca 01       	movw	r24, r20
    1be6:	81 70       	andi	r24, 0x01	; 1
    1be8:	89 83       	std	Y+1, r24	; 0x01
    1bea:	11 c0       	rjmp	.+34     	; 0x1c0e <MDIO_u8GetPinVal+0xe2>
		break;
	case DIO_PORTD :
		L_PinVal = GET_BIT(PIND , A_u8PinNo );
    1bec:	e0 e3       	ldi	r30, 0x30	; 48
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	88 2f       	mov	r24, r24
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	a9 01       	movw	r20, r18
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <MDIO_u8GetPinVal+0xd8>
    1c00:	55 95       	asr	r21
    1c02:	47 95       	ror	r20
    1c04:	8a 95       	dec	r24
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <MDIO_u8GetPinVal+0xd4>
    1c08:	ca 01       	movw	r24, r20
    1c0a:	81 70       	andi	r24, 0x01	; 1
    1c0c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return L_PinVal ;
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <MDIO_vSetPortDir>:

void MDIO_vSetPortDir(u8 A_u8PortNo , u8 A_u8Dir)
{
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <MDIO_vSetPortDir+0x6>
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <MDIO_vSetPortDir+0x8>
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	89 83       	std	Y+1, r24	; 0x01
    1c2e:	6a 83       	std	Y+2, r22	; 0x02

	switch(A_u8PortNo)
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	3c 83       	std	Y+4, r19	; 0x04
    1c38:	2b 83       	std	Y+3, r18	; 0x03
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3e:	81 30       	cpi	r24, 0x01	; 1
    1c40:	91 05       	cpc	r25, r1
    1c42:	d1 f0       	breq	.+52     	; 0x1c78 <MDIO_vSetPortDir+0x58>
    1c44:	2b 81       	ldd	r18, Y+3	; 0x03
    1c46:	3c 81       	ldd	r19, Y+4	; 0x04
    1c48:	22 30       	cpi	r18, 0x02	; 2
    1c4a:	31 05       	cpc	r19, r1
    1c4c:	2c f4       	brge	.+10     	; 0x1c58 <MDIO_vSetPortDir+0x38>
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	9c 81       	ldd	r25, Y+4	; 0x04
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	61 f0       	breq	.+24     	; 0x1c6e <MDIO_vSetPortDir+0x4e>
    1c56:	1e c0       	rjmp	.+60     	; 0x1c94 <MDIO_vSetPortDir+0x74>
    1c58:	2b 81       	ldd	r18, Y+3	; 0x03
    1c5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c5c:	22 30       	cpi	r18, 0x02	; 2
    1c5e:	31 05       	cpc	r19, r1
    1c60:	81 f0       	breq	.+32     	; 0x1c82 <MDIO_vSetPortDir+0x62>
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	9c 81       	ldd	r25, Y+4	; 0x04
    1c66:	83 30       	cpi	r24, 0x03	; 3
    1c68:	91 05       	cpc	r25, r1
    1c6a:	81 f0       	breq	.+32     	; 0x1c8c <MDIO_vSetPortDir+0x6c>
    1c6c:	13 c0       	rjmp	.+38     	; 0x1c94 <MDIO_vSetPortDir+0x74>
	{
	case DIO_PORTA :
		DDRA =  A_u8Dir;
    1c6e:	ea e3       	ldi	r30, 0x3A	; 58
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	80 83       	st	Z, r24
    1c76:	0e c0       	rjmp	.+28     	; 0x1c94 <MDIO_vSetPortDir+0x74>
		break;
	case DIO_PORTB :
		DDRB = A_u8Dir;
    1c78:	e7 e3       	ldi	r30, 0x37	; 55
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	80 83       	st	Z, r24
    1c80:	09 c0       	rjmp	.+18     	; 0x1c94 <MDIO_vSetPortDir+0x74>
		break;
	case DIO_PORTC:
		DDRC = A_u8Dir ;
    1c82:	e4 e3       	ldi	r30, 0x34	; 52
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	80 83       	st	Z, r24
    1c8a:	04 c0       	rjmp	.+8      	; 0x1c94 <MDIO_vSetPortDir+0x74>
		break;
	case DIO_PORTD :
		DDRD = A_u8Dir ;
    1c8c:	e1 e3       	ldi	r30, 0x31	; 49
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	80 83       	st	Z, r24
		break;
	}

}
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <MDIO_vSetPortVal>:
void MDIO_vSetPortVal(u8 A_u8PortNo , u8 A_u8val)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <MDIO_vSetPortVal+0x6>
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <MDIO_vSetPortVal+0x8>
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNo)
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	3c 83       	std	Y+4, r19	; 0x04
    1cba:	2b 83       	std	Y+3, r18	; 0x03
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc0:	81 30       	cpi	r24, 0x01	; 1
    1cc2:	91 05       	cpc	r25, r1
    1cc4:	d1 f0       	breq	.+52     	; 0x1cfa <MDIO_vSetPortVal+0x58>
    1cc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cca:	22 30       	cpi	r18, 0x02	; 2
    1ccc:	31 05       	cpc	r19, r1
    1cce:	2c f4       	brge	.+10     	; 0x1cda <MDIO_vSetPortVal+0x38>
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	61 f0       	breq	.+24     	; 0x1cf0 <MDIO_vSetPortVal+0x4e>
    1cd8:	1e c0       	rjmp	.+60     	; 0x1d16 <MDIO_vSetPortVal+0x74>
    1cda:	2b 81       	ldd	r18, Y+3	; 0x03
    1cdc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cde:	22 30       	cpi	r18, 0x02	; 2
    1ce0:	31 05       	cpc	r19, r1
    1ce2:	81 f0       	breq	.+32     	; 0x1d04 <MDIO_vSetPortVal+0x62>
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce8:	83 30       	cpi	r24, 0x03	; 3
    1cea:	91 05       	cpc	r25, r1
    1cec:	81 f0       	breq	.+32     	; 0x1d0e <MDIO_vSetPortVal+0x6c>
    1cee:	13 c0       	rjmp	.+38     	; 0x1d16 <MDIO_vSetPortVal+0x74>
	{
	case DIO_PORTA :
		PORTA=  A_u8val;
    1cf0:	eb e3       	ldi	r30, 0x3B	; 59
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf6:	80 83       	st	Z, r24
    1cf8:	0e c0       	rjmp	.+28     	; 0x1d16 <MDIO_vSetPortVal+0x74>
		break;
	case DIO_PORTB :
		PORTB = A_u8val;
    1cfa:	e8 e3       	ldi	r30, 0x38	; 56
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	80 83       	st	Z, r24
    1d02:	09 c0       	rjmp	.+18     	; 0x1d16 <MDIO_vSetPortVal+0x74>
		break;
	case DIO_PORTC:
		PORTC = A_u8val ;
    1d04:	e5 e3       	ldi	r30, 0x35	; 53
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	80 83       	st	Z, r24
    1d0c:	04 c0       	rjmp	.+8      	; 0x1d16 <MDIO_vSetPortVal+0x74>
		break;
	case DIO_PORTD :
		PORTD = A_u8val ;
    1d0e:	e2 e3       	ldi	r30, 0x32	; 50
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	80 83       	st	Z, r24
		break;
	}

}
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <MDIO_u8GetPortVal>:

u8 MDIO_u8GetPortVal(u8 A_u8PortNo)
{
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <MDIO_u8GetPortVal+0x6>
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <MDIO_u8GetPortVal+0x8>
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	8a 83       	std	Y+2, r24	; 0x02

	u8 L_PortVal = 0 ;
    1d32:	19 82       	std	Y+1, r1	; 0x01

	switch(A_u8PortNo)
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	3c 83       	std	Y+4, r19	; 0x04
    1d3c:	2b 83       	std	Y+3, r18	; 0x03
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	9c 81       	ldd	r25, Y+4	; 0x04
    1d42:	81 30       	cpi	r24, 0x01	; 1
    1d44:	91 05       	cpc	r25, r1
    1d46:	d1 f0       	breq	.+52     	; 0x1d7c <MDIO_u8GetPortVal+0x58>
    1d48:	2b 81       	ldd	r18, Y+3	; 0x03
    1d4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d4c:	22 30       	cpi	r18, 0x02	; 2
    1d4e:	31 05       	cpc	r19, r1
    1d50:	2c f4       	brge	.+10     	; 0x1d5c <MDIO_u8GetPortVal+0x38>
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	9c 81       	ldd	r25, Y+4	; 0x04
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	61 f0       	breq	.+24     	; 0x1d72 <MDIO_u8GetPortVal+0x4e>
    1d5a:	1e c0       	rjmp	.+60     	; 0x1d98 <MDIO_u8GetPortVal+0x74>
    1d5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d60:	22 30       	cpi	r18, 0x02	; 2
    1d62:	31 05       	cpc	r19, r1
    1d64:	81 f0       	breq	.+32     	; 0x1d86 <MDIO_u8GetPortVal+0x62>
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6a:	83 30       	cpi	r24, 0x03	; 3
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	81 f0       	breq	.+32     	; 0x1d90 <MDIO_u8GetPortVal+0x6c>
    1d70:	13 c0       	rjmp	.+38     	; 0x1d98 <MDIO_u8GetPortVal+0x74>
	{
	case DIO_PORTA :
		L_PortVal = PORTA ;
    1d72:	eb e3       	ldi	r30, 0x3B	; 59
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	89 83       	std	Y+1, r24	; 0x01
    1d7a:	0e c0       	rjmp	.+28     	; 0x1d98 <MDIO_u8GetPortVal+0x74>
		break;
	case DIO_PORTB :
		L_PortVal = PORTB ;
    1d7c:	e8 e3       	ldi	r30, 0x38	; 56
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	89 83       	std	Y+1, r24	; 0x01
    1d84:	09 c0       	rjmp	.+18     	; 0x1d98 <MDIO_u8GetPortVal+0x74>
		break;
	case DIO_PORTC:
		L_PortVal = PORTC ;
    1d86:	e5 e3       	ldi	r30, 0x35	; 53
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	89 83       	std	Y+1, r24	; 0x01
    1d8e:	04 c0       	rjmp	.+8      	; 0x1d98 <MDIO_u8GetPortVal+0x74>
		break;
	case DIO_PORTD :
		L_PortVal = PORTD ;
    1d90:	e2 e3       	ldi	r30, 0x32	; 50
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return L_PortVal ;
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	cf 91       	pop	r28
    1da4:	df 91       	pop	r29
    1da6:	08 95       	ret

00001da8 <MADC_vInit>:
void (*ADC_Callback_2)(u16 A_u16ADC_Data);
u16*  G_pu16ADC_Data;
FlagStatus_t xAdcFlag = ADC_NOT_COMPLETE ;

void MADC_vInit(void)
{
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
	/* 1- Reference voltage selection */
#if ADC_REF_VOLT==AVCC
	CLR_BIT(ADMUX, REFS1);
    1db0:	a7 e2       	ldi	r26, 0x27	; 39
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e7 e2       	ldi	r30, 0x27	; 39
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	8f 77       	andi	r24, 0x7F	; 127
    1dbc:	8c 93       	st	X, r24
	SET_BIT(ADMUX, REFS0);
    1dbe:	a7 e2       	ldi	r26, 0x27	; 39
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e7 e2       	ldi	r30, 0x27	; 39
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	80 64       	ori	r24, 0x40	; 64
    1dca:	8c 93       	st	X, r24
#else
#error "Please select correct refence voltage"
#endif

	/* 2- Data Adjustment direction  */
	CLR_BIT(ADMUX, ADLAR);
    1dcc:	a7 e2       	ldi	r26, 0x27	; 39
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	e7 e2       	ldi	r30, 0x27	; 39
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	8f 7d       	andi	r24, 0xDF	; 223
    1dd8:	8c 93       	st	X, r24
	/* 3- Select Prescaler Bits    */
	ADCSRA = (ADCSRA & 0xF8) | (ADC_PRESCALER) ;
    1dda:	a6 e2       	ldi	r26, 0x26	; 38
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e6 e2       	ldi	r30, 0x26	; 38
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	88 7f       	andi	r24, 0xF8	; 248
    1de6:	83 60       	ori	r24, 0x03	; 3
    1de8:	8c 93       	st	X, r24
	/* 4- Auto trigger Enable     */
	/*  4a- Select Auto trigger source  */
	CLR_BIT(ADCSRA, ADATE);
    1dea:	a6 e2       	ldi	r26, 0x26	; 38
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e6 e2       	ldi	r30, 0x26	; 38
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	8f 7d       	andi	r24, 0xDF	; 223
    1df6:	8c 93       	st	X, r24
	/* 5- Interrupt Enable/disable    */
#if ADC_INTERRUPT_ENABLE==DISABLE
	CLR_BIT(ADCSRA, ADIE);
#elif ADC_INTERRUPT_ENABLE==ENABLE
	SET_BIT(ADCSRA, ADIE);
    1df8:	a6 e2       	ldi	r26, 0x26	; 38
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e6 e2       	ldi	r30, 0x26	; 38
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	88 60       	ori	r24, 0x08	; 8
    1e04:	8c 93       	st	X, r24
#endif
	/* 6- Enable ADC peripheral   */
	SET_BIT(ADCSRA, ADEN);
    1e06:	a6 e2       	ldi	r26, 0x26	; 38
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e6 e2       	ldi	r30, 0x26	; 38
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	80 68       	ori	r24, 0x80	; 128
    1e12:	8c 93       	st	X, r24
}
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	08 95       	ret

00001e1a <MADC_u16AnalogRead>:

u16  MADC_u16AnalogRead(u8 A_u8ChannelNo )
{
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	0f 92       	push	r0
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	89 83       	std	Y+1, r24	; 0x01
	/* 1- Select Channel   */
	ADMUX = (ADMUX & 0xE0) | (A_u8ChannelNo & 0x07) ;
    1e26:	a7 e2       	ldi	r26, 0x27	; 39
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e7 e2       	ldi	r30, 0x27	; 39
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	98 2f       	mov	r25, r24
    1e32:	90 7e       	andi	r25, 0xE0	; 224
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	87 70       	andi	r24, 0x07	; 7
    1e38:	89 2b       	or	r24, r25
    1e3a:	8c 93       	st	X, r24
	/* 2- Start Conversion */
	SET_BIT(ADCSRA, ADSC);
    1e3c:	a6 e2       	ldi	r26, 0x26	; 38
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e6 e2       	ldi	r30, 0x26	; 38
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	80 64       	ori	r24, 0x40	; 64
    1e48:	8c 93       	st	X, r24
	/* 3- Poll on Flag     */
	while( GET_BIT(ADCSRA, ADIF) != 1 ){}
    1e4a:	e6 e2       	ldi	r30, 0x26	; 38
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	82 95       	swap	r24
    1e52:	8f 70       	andi	r24, 0x0F	; 15
    1e54:	88 2f       	mov	r24, r24
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	81 70       	andi	r24, 0x01	; 1
    1e5a:	90 70       	andi	r25, 0x00	; 0
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	a9 f3       	breq	.-22     	; 0x1e4a <MADC_u16AnalogRead+0x30>
	/* 4- Clear Flag       */
	SET_BIT(ADCSRA, ADIF);
    1e60:	a6 e2       	ldi	r26, 0x26	; 38
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e6 e2       	ldi	r30, 0x26	; 38
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	80 61       	ori	r24, 0x10	; 16
    1e6c:	8c 93       	st	X, r24
	/* 5- return ADC Data  */
	return ADC;
    1e6e:	e4 e2       	ldi	r30, 0x24	; 36
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	91 81       	ldd	r25, Z+1	; 0x01
}
    1e76:	0f 90       	pop	r0
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <MADC_vStartConversion>:


void MADC_vStartConversion(u8 A_u8ChannelNo)
{
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	0f 92       	push	r0
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	89 83       	std	Y+1, r24	; 0x01
	/* 1- Select Channel   */
	ADMUX = (ADMUX & 0xE0) | (A_u8ChannelNo & 0x07) ;
    1e8a:	a7 e2       	ldi	r26, 0x27	; 39
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e7 e2       	ldi	r30, 0x27	; 39
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	98 2f       	mov	r25, r24
    1e96:	90 7e       	andi	r25, 0xE0	; 224
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	87 70       	andi	r24, 0x07	; 7
    1e9c:	89 2b       	or	r24, r25
    1e9e:	8c 93       	st	X, r24
	/* 2- Start Conversion */
	SET_BIT(ADCSRA, ADSC);
    1ea0:	a6 e2       	ldi	r26, 0x26	; 38
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e6 e2       	ldi	r30, 0x26	; 38
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	80 64       	ori	r24, 0x40	; 64
    1eac:	8c 93       	st	X, r24
}
    1eae:	0f 90       	pop	r0
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <MADC_u16GetADCData>:

u16   MADC_u16GetADCData(void)
{
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
	/* 5- return ADC Data  */
	return ADC;
    1ebe:	e4 e2       	ldi	r30, 0x24	; 36
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	91 81       	ldd	r25, Z+1	; 0x01
}
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	08 95       	ret

00001ecc <MADC_xGetFlagStatus>:

FlagStatus_t    MADC_xGetFlagStatus(void)
{
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62

	if(GET_BIT(ADCSRA, ADIF) == 1)
    1ed4:	e6 e2       	ldi	r30, 0x26	; 38
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	82 95       	swap	r24
    1edc:	8f 70       	andi	r24, 0x0F	; 15
    1ede:	88 2f       	mov	r24, r24
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	81 70       	andi	r24, 0x01	; 1
    1ee4:	90 70       	andi	r25, 0x00	; 0
    1ee6:	88 23       	and	r24, r24
    1ee8:	11 f0       	breq	.+4      	; 0x1eee <MADC_xGetFlagStatus+0x22>
	{
		xAdcFlag = ADC_COMPLETE ;
    1eea:	10 92 be 00 	sts	0x00BE, r1
	}
	return xAdcFlag ;
    1eee:	80 91 be 00 	lds	r24, 0x00BE
}
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	08 95       	ret

00001ef8 <MADC_vSetCallback>:

void MADC_vSetCallback( void (*A_fptr)(void)  )
{
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <MADC_vSetCallback+0x6>
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	9a 83       	std	Y+2, r25	; 0x02
    1f04:	89 83       	std	Y+1, r24	; 0x01
	ADC_Callback = A_fptr;
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0a:	90 93 e0 00 	sts	0x00E0, r25
    1f0e:	80 93 df 00 	sts	0x00DF, r24
}
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <MADC_vStartADCConversion_Asynch>:

void MADC_vStartADCConversion_Asynch(u8 A_u8ChannelNo   ,
									 u16* A_u16pu16ADCData ,
									 void (*A_fptr)(void) )
{
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <MADC_vStartADCConversion_Asynch+0x6>
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <MADC_vStartADCConversion_Asynch+0x8>
    1f24:	0f 92       	push	r0
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	89 83       	std	Y+1, r24	; 0x01
    1f2c:	7b 83       	std	Y+3, r23	; 0x03
    1f2e:	6a 83       	std	Y+2, r22	; 0x02
    1f30:	5d 83       	std	Y+5, r21	; 0x05
    1f32:	4c 83       	std	Y+4, r20	; 0x04
	/* 1- set Call back function pointer */
	ADC_Callback = A_fptr ;
    1f34:	8c 81       	ldd	r24, Y+4	; 0x04
    1f36:	9d 81       	ldd	r25, Y+5	; 0x05
    1f38:	90 93 e0 00 	sts	0x00E0, r25
    1f3c:	80 93 df 00 	sts	0x00DF, r24
	/* 2- set ADC data pointer */
	G_pu16ADC_Data = A_u16pu16ADCData ;
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	9b 81       	ldd	r25, Y+3	; 0x03
    1f44:	90 93 e2 00 	sts	0x00E2, r25
    1f48:	80 93 e1 00 	sts	0x00E1, r24

	/* 3- Select Channel   */
		ADMUX = (ADMUX & 0xE0) | (A_u8ChannelNo & 0x07) ;
    1f4c:	a7 e2       	ldi	r26, 0x27	; 39
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e7 e2       	ldi	r30, 0x27	; 39
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	98 2f       	mov	r25, r24
    1f58:	90 7e       	andi	r25, 0xE0	; 224
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	87 70       	andi	r24, 0x07	; 7
    1f5e:	89 2b       	or	r24, r25
    1f60:	8c 93       	st	X, r24
	/* 4- Start Conversion */
	SET_BIT(ADCSRA, ADSC);
    1f62:	a6 e2       	ldi	r26, 0x26	; 38
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e6 e2       	ldi	r30, 0x26	; 38
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	80 64       	ori	r24, 0x40	; 64
    1f6e:	8c 93       	st	X, r24
}
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	08 95       	ret

00001f80 <__vector_16>:


/* ADC_ISR */
void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
    1f80:	1f 92       	push	r1
    1f82:	0f 92       	push	r0
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	0f 92       	push	r0
    1f88:	11 24       	eor	r1, r1
    1f8a:	2f 93       	push	r18
    1f8c:	3f 93       	push	r19
    1f8e:	4f 93       	push	r20
    1f90:	5f 93       	push	r21
    1f92:	6f 93       	push	r22
    1f94:	7f 93       	push	r23
    1f96:	8f 93       	push	r24
    1f98:	9f 93       	push	r25
    1f9a:	af 93       	push	r26
    1f9c:	bf 93       	push	r27
    1f9e:	ef 93       	push	r30
    1fa0:	ff 93       	push	r31
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62

	if(G_pu16ADC_Data != NULL)
    1faa:	80 91 e1 00 	lds	r24, 0x00E1
    1fae:	90 91 e2 00 	lds	r25, 0x00E2
    1fb2:	00 97       	sbiw	r24, 0x00	; 0
    1fb4:	59 f0       	breq	.+22     	; 0x1fcc <__vector_16+0x4c>
	{
		*G_pu16ADC_Data = ADC ;
    1fb6:	e0 91 e1 00 	lds	r30, 0x00E1
    1fba:	f0 91 e2 00 	lds	r31, 0x00E2
    1fbe:	a4 e2       	ldi	r26, 0x24	; 36
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	8d 91       	ld	r24, X+
    1fc4:	9c 91       	ld	r25, X
    1fc6:	11 97       	sbiw	r26, 0x01	; 1
    1fc8:	91 83       	std	Z+1, r25	; 0x01
    1fca:	80 83       	st	Z, r24
	}

	if(ADC_Callback != NULL)
    1fcc:	80 91 df 00 	lds	r24, 0x00DF
    1fd0:	90 91 e0 00 	lds	r25, 0x00E0
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	29 f0       	breq	.+10     	; 0x1fe2 <__vector_16+0x62>
	{
		ADC_Callback();
    1fd8:	e0 91 df 00 	lds	r30, 0x00DF
    1fdc:	f0 91 e0 00 	lds	r31, 0x00E0
    1fe0:	09 95       	icall

	}
}
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	ff 91       	pop	r31
    1fe8:	ef 91       	pop	r30
    1fea:	bf 91       	pop	r27
    1fec:	af 91       	pop	r26
    1fee:	9f 91       	pop	r25
    1ff0:	8f 91       	pop	r24
    1ff2:	7f 91       	pop	r23
    1ff4:	6f 91       	pop	r22
    1ff6:	5f 91       	pop	r21
    1ff8:	4f 91       	pop	r20
    1ffa:	3f 91       	pop	r19
    1ffc:	2f 91       	pop	r18
    1ffe:	0f 90       	pop	r0
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	0f 90       	pop	r0
    2004:	1f 90       	pop	r1
    2006:	18 95       	reti

00002008 <HLCD_vSendCommand>:
#include <util/delay.h>
#include"LCD_int.h"


void HLCD_vSendCommand(u8 A_u8Command)
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
    2010:	6d 97       	sbiw	r28, 0x1d	; 29
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	f8 94       	cli
    2016:	de bf       	out	0x3e, r29	; 62
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	cd bf       	out	0x3d, r28	; 61
    201c:	8d 8f       	std	Y+29, r24	; 0x1d

	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_RS_PIN , DIO_LOW);
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	60 e0       	ldi	r22, 0x00	; 0
    2022:	40 e0       	ldi	r20, 0x00	; 0
    2024:	0e 94 19 0c 	call	0x1832	; 0x1832 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_RW_PIN , DIO_LOW);
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	61 e0       	ldi	r22, 0x01	; 1
    202c:	40 e0       	ldi	r20, 0x00	; 0
    202e:	0e 94 19 0c 	call	0x1832	; 0x1832 <MDIO_vSetPinVal>
	MDIO_vSetPortVal(LCD_DATA_PORT,A_u8Command);
    2032:	83 e0       	ldi	r24, 0x03	; 3
    2034:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2036:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <MDIO_vSetPortVal>

	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_EN_PIN,DIO_HIGH);
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	62 e0       	ldi	r22, 0x02	; 2
    203e:	41 e0       	ldi	r20, 0x01	; 1
    2040:	0e 94 19 0c 	call	0x1832	; 0x1832 <MDIO_vSetPinVal>
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	a0 e8       	ldi	r26, 0x80	; 128
    204a:	bf e3       	ldi	r27, 0x3F	; 63
    204c:	89 8f       	std	Y+25, r24	; 0x19
    204e:	9a 8f       	std	Y+26, r25	; 0x1a
    2050:	ab 8f       	std	Y+27, r26	; 0x1b
    2052:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2054:	69 8d       	ldd	r22, Y+25	; 0x19
    2056:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2058:	8b 8d       	ldd	r24, Y+27	; 0x1b
    205a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	4a ef       	ldi	r20, 0xFA	; 250
    2062:	54 e4       	ldi	r21, 0x44	; 68
    2064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	8d 8b       	std	Y+21, r24	; 0x15
    206e:	9e 8b       	std	Y+22, r25	; 0x16
    2070:	af 8b       	std	Y+23, r26	; 0x17
    2072:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2074:	6d 89       	ldd	r22, Y+21	; 0x15
    2076:	7e 89       	ldd	r23, Y+22	; 0x16
    2078:	8f 89       	ldd	r24, Y+23	; 0x17
    207a:	98 8d       	ldd	r25, Y+24	; 0x18
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	40 e8       	ldi	r20, 0x80	; 128
    2082:	5f e3       	ldi	r21, 0x3F	; 63
    2084:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2088:	88 23       	and	r24, r24
    208a:	2c f4       	brge	.+10     	; 0x2096 <HLCD_vSendCommand+0x8e>
		__ticks = 1;
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	9c 8b       	std	Y+20, r25	; 0x14
    2092:	8b 8b       	std	Y+19, r24	; 0x13
    2094:	3f c0       	rjmp	.+126    	; 0x2114 <HLCD_vSendCommand+0x10c>
	else if (__tmp > 65535)
    2096:	6d 89       	ldd	r22, Y+21	; 0x15
    2098:	7e 89       	ldd	r23, Y+22	; 0x16
    209a:	8f 89       	ldd	r24, Y+23	; 0x17
    209c:	98 8d       	ldd	r25, Y+24	; 0x18
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	3f ef       	ldi	r19, 0xFF	; 255
    20a2:	4f e7       	ldi	r20, 0x7F	; 127
    20a4:	57 e4       	ldi	r21, 0x47	; 71
    20a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20aa:	18 16       	cp	r1, r24
    20ac:	4c f5       	brge	.+82     	; 0x2100 <HLCD_vSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ae:	69 8d       	ldd	r22, Y+25	; 0x19
    20b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e2       	ldi	r20, 0x20	; 32
    20bc:	51 e4       	ldi	r21, 0x41	; 65
    20be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	bc 01       	movw	r22, r24
    20c8:	cd 01       	movw	r24, r26
    20ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	9c 8b       	std	Y+20, r25	; 0x14
    20d4:	8b 8b       	std	Y+19, r24	; 0x13
    20d6:	0f c0       	rjmp	.+30     	; 0x20f6 <HLCD_vSendCommand+0xee>
    20d8:	88 ec       	ldi	r24, 0xC8	; 200
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	9a 8b       	std	Y+18, r25	; 0x12
    20de:	89 8b       	std	Y+17, r24	; 0x11
    20e0:	89 89       	ldd	r24, Y+17	; 0x11
    20e2:	9a 89       	ldd	r25, Y+18	; 0x12
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	f1 f7       	brne	.-4      	; 0x20e4 <HLCD_vSendCommand+0xdc>
    20e8:	9a 8b       	std	Y+18, r25	; 0x12
    20ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ec:	8b 89       	ldd	r24, Y+19	; 0x13
    20ee:	9c 89       	ldd	r25, Y+20	; 0x14
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	9c 8b       	std	Y+20, r25	; 0x14
    20f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f6:	8b 89       	ldd	r24, Y+19	; 0x13
    20f8:	9c 89       	ldd	r25, Y+20	; 0x14
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	69 f7       	brne	.-38     	; 0x20d8 <HLCD_vSendCommand+0xd0>
    20fe:	14 c0       	rjmp	.+40     	; 0x2128 <HLCD_vSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2100:	6d 89       	ldd	r22, Y+21	; 0x15
    2102:	7e 89       	ldd	r23, Y+22	; 0x16
    2104:	8f 89       	ldd	r24, Y+23	; 0x17
    2106:	98 8d       	ldd	r25, Y+24	; 0x18
    2108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9c 8b       	std	Y+20, r25	; 0x14
    2112:	8b 8b       	std	Y+19, r24	; 0x13
    2114:	8b 89       	ldd	r24, Y+19	; 0x13
    2116:	9c 89       	ldd	r25, Y+20	; 0x14
    2118:	98 8b       	std	Y+16, r25	; 0x10
    211a:	8f 87       	std	Y+15, r24	; 0x0f
    211c:	8f 85       	ldd	r24, Y+15	; 0x0f
    211e:	98 89       	ldd	r25, Y+16	; 0x10
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	f1 f7       	brne	.-4      	; 0x2120 <HLCD_vSendCommand+0x118>
    2124:	98 8b       	std	Y+16, r25	; 0x10
    2126:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_EN_PIN,DIO_LOW);
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	62 e0       	ldi	r22, 0x02	; 2
    212c:	40 e0       	ldi	r20, 0x00	; 0
    212e:	0e 94 19 0c 	call	0x1832	; 0x1832 <MDIO_vSetPinVal>
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	a0 e8       	ldi	r26, 0x80	; 128
    2138:	bf e3       	ldi	r27, 0x3F	; 63
    213a:	8b 87       	std	Y+11, r24	; 0x0b
    213c:	9c 87       	std	Y+12, r25	; 0x0c
    213e:	ad 87       	std	Y+13, r26	; 0x0d
    2140:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2142:	6b 85       	ldd	r22, Y+11	; 0x0b
    2144:	7c 85       	ldd	r23, Y+12	; 0x0c
    2146:	8d 85       	ldd	r24, Y+13	; 0x0d
    2148:	9e 85       	ldd	r25, Y+14	; 0x0e
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	4a ef       	ldi	r20, 0xFA	; 250
    2150:	54 e4       	ldi	r21, 0x44	; 68
    2152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	8f 83       	std	Y+7, r24	; 0x07
    215c:	98 87       	std	Y+8, r25	; 0x08
    215e:	a9 87       	std	Y+9, r26	; 0x09
    2160:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2162:	6f 81       	ldd	r22, Y+7	; 0x07
    2164:	78 85       	ldd	r23, Y+8	; 0x08
    2166:	89 85       	ldd	r24, Y+9	; 0x09
    2168:	9a 85       	ldd	r25, Y+10	; 0x0a
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e8       	ldi	r20, 0x80	; 128
    2170:	5f e3       	ldi	r21, 0x3F	; 63
    2172:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2176:	88 23       	and	r24, r24
    2178:	2c f4       	brge	.+10     	; 0x2184 <HLCD_vSendCommand+0x17c>
		__ticks = 1;
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	9e 83       	std	Y+6, r25	; 0x06
    2180:	8d 83       	std	Y+5, r24	; 0x05
    2182:	3f c0       	rjmp	.+126    	; 0x2202 <HLCD_vSendCommand+0x1fa>
	else if (__tmp > 65535)
    2184:	6f 81       	ldd	r22, Y+7	; 0x07
    2186:	78 85       	ldd	r23, Y+8	; 0x08
    2188:	89 85       	ldd	r24, Y+9	; 0x09
    218a:	9a 85       	ldd	r25, Y+10	; 0x0a
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	3f ef       	ldi	r19, 0xFF	; 255
    2190:	4f e7       	ldi	r20, 0x7F	; 127
    2192:	57 e4       	ldi	r21, 0x47	; 71
    2194:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2198:	18 16       	cp	r1, r24
    219a:	4c f5       	brge	.+82     	; 0x21ee <HLCD_vSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219c:	6b 85       	ldd	r22, Y+11	; 0x0b
    219e:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e2       	ldi	r20, 0x20	; 32
    21aa:	51 e4       	ldi	r21, 0x41	; 65
    21ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	bc 01       	movw	r22, r24
    21b6:	cd 01       	movw	r24, r26
    21b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	8d 83       	std	Y+5, r24	; 0x05
    21c4:	0f c0       	rjmp	.+30     	; 0x21e4 <HLCD_vSendCommand+0x1dc>
    21c6:	88 ec       	ldi	r24, 0xC8	; 200
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	9c 83       	std	Y+4, r25	; 0x04
    21cc:	8b 83       	std	Y+3, r24	; 0x03
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	9c 81       	ldd	r25, Y+4	; 0x04
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <HLCD_vSendCommand+0x1ca>
    21d6:	9c 83       	std	Y+4, r25	; 0x04
    21d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21da:	8d 81       	ldd	r24, Y+5	; 0x05
    21dc:	9e 81       	ldd	r25, Y+6	; 0x06
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	9e 83       	std	Y+6, r25	; 0x06
    21e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e4:	8d 81       	ldd	r24, Y+5	; 0x05
    21e6:	9e 81       	ldd	r25, Y+6	; 0x06
    21e8:	00 97       	sbiw	r24, 0x00	; 0
    21ea:	69 f7       	brne	.-38     	; 0x21c6 <HLCD_vSendCommand+0x1be>
    21ec:	14 c0       	rjmp	.+40     	; 0x2216 <HLCD_vSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ee:	6f 81       	ldd	r22, Y+7	; 0x07
    21f0:	78 85       	ldd	r23, Y+8	; 0x08
    21f2:	89 85       	ldd	r24, Y+9	; 0x09
    21f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	9e 83       	std	Y+6, r25	; 0x06
    2200:	8d 83       	std	Y+5, r24	; 0x05
    2202:	8d 81       	ldd	r24, Y+5	; 0x05
    2204:	9e 81       	ldd	r25, Y+6	; 0x06
    2206:	9a 83       	std	Y+2, r25	; 0x02
    2208:	89 83       	std	Y+1, r24	; 0x01
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	9a 81       	ldd	r25, Y+2	; 0x02
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <HLCD_vSendCommand+0x206>
    2212:	9a 83       	std	Y+2, r25	; 0x02
    2214:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2216:	6d 96       	adiw	r28, 0x1d	; 29
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	cd bf       	out	0x3d, r28	; 61
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <HLCD_vSendChar>:

void HLCD_vSendChar(u8 A_u8Char)
{
    2228:	df 93       	push	r29
    222a:	cf 93       	push	r28
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	6d 97       	sbiw	r28, 0x1d	; 29
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	f8 94       	cli
    2236:	de bf       	out	0x3e, r29	; 62
    2238:	0f be       	out	0x3f, r0	; 63
    223a:	cd bf       	out	0x3d, r28	; 61
    223c:	8d 8f       	std	Y+29, r24	; 0x1d
	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_RS_PIN , DIO_HIGH);
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	60 e0       	ldi	r22, 0x00	; 0
    2242:	41 e0       	ldi	r20, 0x01	; 1
    2244:	0e 94 19 0c 	call	0x1832	; 0x1832 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_RW_PIN , DIO_LOW);
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	61 e0       	ldi	r22, 0x01	; 1
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	0e 94 19 0c 	call	0x1832	; 0x1832 <MDIO_vSetPinVal>
	MDIO_vSetPortVal(LCD_DATA_PORT,A_u8Char);
    2252:	83 e0       	ldi	r24, 0x03	; 3
    2254:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2256:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <MDIO_vSetPortVal>

	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_EN_PIN,DIO_HIGH);
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	62 e0       	ldi	r22, 0x02	; 2
    225e:	41 e0       	ldi	r20, 0x01	; 1
    2260:	0e 94 19 0c 	call	0x1832	; 0x1832 <MDIO_vSetPinVal>
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	a0 e8       	ldi	r26, 0x80	; 128
    226a:	bf e3       	ldi	r27, 0x3F	; 63
    226c:	89 8f       	std	Y+25, r24	; 0x19
    226e:	9a 8f       	std	Y+26, r25	; 0x1a
    2270:	ab 8f       	std	Y+27, r26	; 0x1b
    2272:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2274:	69 8d       	ldd	r22, Y+25	; 0x19
    2276:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2278:	8b 8d       	ldd	r24, Y+27	; 0x1b
    227a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	4a ef       	ldi	r20, 0xFA	; 250
    2282:	54 e4       	ldi	r21, 0x44	; 68
    2284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	8d 8b       	std	Y+21, r24	; 0x15
    228e:	9e 8b       	std	Y+22, r25	; 0x16
    2290:	af 8b       	std	Y+23, r26	; 0x17
    2292:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2294:	6d 89       	ldd	r22, Y+21	; 0x15
    2296:	7e 89       	ldd	r23, Y+22	; 0x16
    2298:	8f 89       	ldd	r24, Y+23	; 0x17
    229a:	98 8d       	ldd	r25, Y+24	; 0x18
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	40 e8       	ldi	r20, 0x80	; 128
    22a2:	5f e3       	ldi	r21, 0x3F	; 63
    22a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a8:	88 23       	and	r24, r24
    22aa:	2c f4       	brge	.+10     	; 0x22b6 <HLCD_vSendChar+0x8e>
		__ticks = 1;
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	9c 8b       	std	Y+20, r25	; 0x14
    22b2:	8b 8b       	std	Y+19, r24	; 0x13
    22b4:	3f c0       	rjmp	.+126    	; 0x2334 <HLCD_vSendChar+0x10c>
	else if (__tmp > 65535)
    22b6:	6d 89       	ldd	r22, Y+21	; 0x15
    22b8:	7e 89       	ldd	r23, Y+22	; 0x16
    22ba:	8f 89       	ldd	r24, Y+23	; 0x17
    22bc:	98 8d       	ldd	r25, Y+24	; 0x18
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	3f ef       	ldi	r19, 0xFF	; 255
    22c2:	4f e7       	ldi	r20, 0x7F	; 127
    22c4:	57 e4       	ldi	r21, 0x47	; 71
    22c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ca:	18 16       	cp	r1, r24
    22cc:	4c f5       	brge	.+82     	; 0x2320 <HLCD_vSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ce:	69 8d       	ldd	r22, Y+25	; 0x19
    22d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e2       	ldi	r20, 0x20	; 32
    22dc:	51 e4       	ldi	r21, 0x41	; 65
    22de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	bc 01       	movw	r22, r24
    22e8:	cd 01       	movw	r24, r26
    22ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	9c 8b       	std	Y+20, r25	; 0x14
    22f4:	8b 8b       	std	Y+19, r24	; 0x13
    22f6:	0f c0       	rjmp	.+30     	; 0x2316 <HLCD_vSendChar+0xee>
    22f8:	88 ec       	ldi	r24, 0xC8	; 200
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9a 8b       	std	Y+18, r25	; 0x12
    22fe:	89 8b       	std	Y+17, r24	; 0x11
    2300:	89 89       	ldd	r24, Y+17	; 0x11
    2302:	9a 89       	ldd	r25, Y+18	; 0x12
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <HLCD_vSendChar+0xdc>
    2308:	9a 8b       	std	Y+18, r25	; 0x12
    230a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230c:	8b 89       	ldd	r24, Y+19	; 0x13
    230e:	9c 89       	ldd	r25, Y+20	; 0x14
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	9c 8b       	std	Y+20, r25	; 0x14
    2314:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2316:	8b 89       	ldd	r24, Y+19	; 0x13
    2318:	9c 89       	ldd	r25, Y+20	; 0x14
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	69 f7       	brne	.-38     	; 0x22f8 <HLCD_vSendChar+0xd0>
    231e:	14 c0       	rjmp	.+40     	; 0x2348 <HLCD_vSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2320:	6d 89       	ldd	r22, Y+21	; 0x15
    2322:	7e 89       	ldd	r23, Y+22	; 0x16
    2324:	8f 89       	ldd	r24, Y+23	; 0x17
    2326:	98 8d       	ldd	r25, Y+24	; 0x18
    2328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	9c 8b       	std	Y+20, r25	; 0x14
    2332:	8b 8b       	std	Y+19, r24	; 0x13
    2334:	8b 89       	ldd	r24, Y+19	; 0x13
    2336:	9c 89       	ldd	r25, Y+20	; 0x14
    2338:	98 8b       	std	Y+16, r25	; 0x10
    233a:	8f 87       	std	Y+15, r24	; 0x0f
    233c:	8f 85       	ldd	r24, Y+15	; 0x0f
    233e:	98 89       	ldd	r25, Y+16	; 0x10
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	f1 f7       	brne	.-4      	; 0x2340 <HLCD_vSendChar+0x118>
    2344:	98 8b       	std	Y+16, r25	; 0x10
    2346:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_vSetPinVal(LCD_CTRL_PORT, LCD_EN_PIN,DIO_LOW);
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	62 e0       	ldi	r22, 0x02	; 2
    234c:	40 e0       	ldi	r20, 0x00	; 0
    234e:	0e 94 19 0c 	call	0x1832	; 0x1832 <MDIO_vSetPinVal>
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	a0 e8       	ldi	r26, 0x80	; 128
    2358:	bf e3       	ldi	r27, 0x3F	; 63
    235a:	8b 87       	std	Y+11, r24	; 0x0b
    235c:	9c 87       	std	Y+12, r25	; 0x0c
    235e:	ad 87       	std	Y+13, r26	; 0x0d
    2360:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2362:	6b 85       	ldd	r22, Y+11	; 0x0b
    2364:	7c 85       	ldd	r23, Y+12	; 0x0c
    2366:	8d 85       	ldd	r24, Y+13	; 0x0d
    2368:	9e 85       	ldd	r25, Y+14	; 0x0e
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	4a ef       	ldi	r20, 0xFA	; 250
    2370:	54 e4       	ldi	r21, 0x44	; 68
    2372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	8f 83       	std	Y+7, r24	; 0x07
    237c:	98 87       	std	Y+8, r25	; 0x08
    237e:	a9 87       	std	Y+9, r26	; 0x09
    2380:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2382:	6f 81       	ldd	r22, Y+7	; 0x07
    2384:	78 85       	ldd	r23, Y+8	; 0x08
    2386:	89 85       	ldd	r24, Y+9	; 0x09
    2388:	9a 85       	ldd	r25, Y+10	; 0x0a
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e8       	ldi	r20, 0x80	; 128
    2390:	5f e3       	ldi	r21, 0x3F	; 63
    2392:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2396:	88 23       	and	r24, r24
    2398:	2c f4       	brge	.+10     	; 0x23a4 <HLCD_vSendChar+0x17c>
		__ticks = 1;
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	9e 83       	std	Y+6, r25	; 0x06
    23a0:	8d 83       	std	Y+5, r24	; 0x05
    23a2:	3f c0       	rjmp	.+126    	; 0x2422 <HLCD_vSendChar+0x1fa>
	else if (__tmp > 65535)
    23a4:	6f 81       	ldd	r22, Y+7	; 0x07
    23a6:	78 85       	ldd	r23, Y+8	; 0x08
    23a8:	89 85       	ldd	r24, Y+9	; 0x09
    23aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	3f ef       	ldi	r19, 0xFF	; 255
    23b0:	4f e7       	ldi	r20, 0x7F	; 127
    23b2:	57 e4       	ldi	r21, 0x47	; 71
    23b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b8:	18 16       	cp	r1, r24
    23ba:	4c f5       	brge	.+82     	; 0x240e <HLCD_vSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23be:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e2       	ldi	r20, 0x20	; 32
    23ca:	51 e4       	ldi	r21, 0x41	; 65
    23cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	bc 01       	movw	r22, r24
    23d6:	cd 01       	movw	r24, r26
    23d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	9e 83       	std	Y+6, r25	; 0x06
    23e2:	8d 83       	std	Y+5, r24	; 0x05
    23e4:	0f c0       	rjmp	.+30     	; 0x2404 <HLCD_vSendChar+0x1dc>
    23e6:	88 ec       	ldi	r24, 0xC8	; 200
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	9c 83       	std	Y+4, r25	; 0x04
    23ec:	8b 83       	std	Y+3, r24	; 0x03
    23ee:	8b 81       	ldd	r24, Y+3	; 0x03
    23f0:	9c 81       	ldd	r25, Y+4	; 0x04
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	f1 f7       	brne	.-4      	; 0x23f2 <HLCD_vSendChar+0x1ca>
    23f6:	9c 83       	std	Y+4, r25	; 0x04
    23f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fa:	8d 81       	ldd	r24, Y+5	; 0x05
    23fc:	9e 81       	ldd	r25, Y+6	; 0x06
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	9e 83       	std	Y+6, r25	; 0x06
    2402:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2404:	8d 81       	ldd	r24, Y+5	; 0x05
    2406:	9e 81       	ldd	r25, Y+6	; 0x06
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	69 f7       	brne	.-38     	; 0x23e6 <HLCD_vSendChar+0x1be>
    240c:	14 c0       	rjmp	.+40     	; 0x2436 <HLCD_vSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240e:	6f 81       	ldd	r22, Y+7	; 0x07
    2410:	78 85       	ldd	r23, Y+8	; 0x08
    2412:	89 85       	ldd	r24, Y+9	; 0x09
    2414:	9a 85       	ldd	r25, Y+10	; 0x0a
    2416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	9e 83       	std	Y+6, r25	; 0x06
    2420:	8d 83       	std	Y+5, r24	; 0x05
    2422:	8d 81       	ldd	r24, Y+5	; 0x05
    2424:	9e 81       	ldd	r25, Y+6	; 0x06
    2426:	9a 83       	std	Y+2, r25	; 0x02
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	9a 81       	ldd	r25, Y+2	; 0x02
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	f1 f7       	brne	.-4      	; 0x242e <HLCD_vSendChar+0x206>
    2432:	9a 83       	std	Y+2, r25	; 0x02
    2434:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    2436:	6d 96       	adiw	r28, 0x1d	; 29
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	f8 94       	cli
    243c:	de bf       	out	0x3e, r29	; 62
    243e:	0f be       	out	0x3f, r0	; 63
    2440:	cd bf       	out	0x3d, r28	; 61
    2442:	cf 91       	pop	r28
    2444:	df 91       	pop	r29
    2446:	08 95       	ret

00002448 <HLCD_vInit>:


void HLCD_vInit(void)
{
    2448:	0f 93       	push	r16
    244a:	1f 93       	push	r17
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
    2454:	c6 54       	subi	r28, 0x46	; 70
    2456:	d0 40       	sbci	r29, 0x00	; 0
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	de bf       	out	0x3e, r29	; 62
    245e:	0f be       	out	0x3f, r0	; 63
    2460:	cd bf       	out	0x3d, r28	; 61

	MDIO_vSetPortDir(LCD_DATA_PORT,0xff);
    2462:	83 e0       	ldi	r24, 0x03	; 3
    2464:	6f ef       	ldi	r22, 0xFF	; 255
    2466:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <MDIO_vSetPortDir>
	MDIO_vSetPinDir(LCD_CTRL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	60 e0       	ldi	r22, 0x00	; 0
    246e:	41 e0       	ldi	r20, 0x01	; 1
    2470:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(LCD_CTRL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	61 e0       	ldi	r22, 0x01	; 1
    2478:	41 e0       	ldi	r20, 0x01	; 1
    247a:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(LCD_CTRL_PORT,LCD_EN_PIN,DIO_OUTPUT);
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	62 e0       	ldi	r22, 0x02	; 2
    2482:	41 e0       	ldi	r20, 0x01	; 1
    2484:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_vSetPinDir>
    2488:	fe 01       	movw	r30, r28
    248a:	ed 5b       	subi	r30, 0xBD	; 189
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	a8 e4       	ldi	r26, 0x48	; 72
    2494:	b2 e4       	ldi	r27, 0x42	; 66
    2496:	80 83       	st	Z, r24
    2498:	91 83       	std	Z+1, r25	; 0x01
    249a:	a2 83       	std	Z+2, r26	; 0x02
    249c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249e:	8e 01       	movw	r16, r28
    24a0:	01 5c       	subi	r16, 0xC1	; 193
    24a2:	1f 4f       	sbci	r17, 0xFF	; 255
    24a4:	fe 01       	movw	r30, r28
    24a6:	ed 5b       	subi	r30, 0xBD	; 189
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	60 81       	ld	r22, Z
    24ac:	71 81       	ldd	r23, Z+1	; 0x01
    24ae:	82 81       	ldd	r24, Z+2	; 0x02
    24b0:	93 81       	ldd	r25, Z+3	; 0x03
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	4a ef       	ldi	r20, 0xFA	; 250
    24b8:	54 e4       	ldi	r21, 0x44	; 68
    24ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	f8 01       	movw	r30, r16
    24c4:	80 83       	st	Z, r24
    24c6:	91 83       	std	Z+1, r25	; 0x01
    24c8:	a2 83       	std	Z+2, r26	; 0x02
    24ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24cc:	fe 01       	movw	r30, r28
    24ce:	ff 96       	adiw	r30, 0x3f	; 63
    24d0:	60 81       	ld	r22, Z
    24d2:	71 81       	ldd	r23, Z+1	; 0x01
    24d4:	82 81       	ldd	r24, Z+2	; 0x02
    24d6:	93 81       	ldd	r25, Z+3	; 0x03
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	40 e8       	ldi	r20, 0x80	; 128
    24de:	5f e3       	ldi	r21, 0x3F	; 63
    24e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24e4:	88 23       	and	r24, r24
    24e6:	2c f4       	brge	.+10     	; 0x24f2 <HLCD_vInit+0xaa>
		__ticks = 1;
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	9e af       	std	Y+62, r25	; 0x3e
    24ee:	8d af       	std	Y+61, r24	; 0x3d
    24f0:	46 c0       	rjmp	.+140    	; 0x257e <HLCD_vInit+0x136>
	else if (__tmp > 65535)
    24f2:	fe 01       	movw	r30, r28
    24f4:	ff 96       	adiw	r30, 0x3f	; 63
    24f6:	60 81       	ld	r22, Z
    24f8:	71 81       	ldd	r23, Z+1	; 0x01
    24fa:	82 81       	ldd	r24, Z+2	; 0x02
    24fc:	93 81       	ldd	r25, Z+3	; 0x03
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	3f ef       	ldi	r19, 0xFF	; 255
    2502:	4f e7       	ldi	r20, 0x7F	; 127
    2504:	57 e4       	ldi	r21, 0x47	; 71
    2506:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    250a:	18 16       	cp	r1, r24
    250c:	64 f5       	brge	.+88     	; 0x2566 <HLCD_vInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250e:	fe 01       	movw	r30, r28
    2510:	ed 5b       	subi	r30, 0xBD	; 189
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	60 81       	ld	r22, Z
    2516:	71 81       	ldd	r23, Z+1	; 0x01
    2518:	82 81       	ldd	r24, Z+2	; 0x02
    251a:	93 81       	ldd	r25, Z+3	; 0x03
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e2       	ldi	r20, 0x20	; 32
    2522:	51 e4       	ldi	r21, 0x41	; 65
    2524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	bc 01       	movw	r22, r24
    252e:	cd 01       	movw	r24, r26
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	9e af       	std	Y+62, r25	; 0x3e
    253a:	8d af       	std	Y+61, r24	; 0x3d
    253c:	0f c0       	rjmp	.+30     	; 0x255c <HLCD_vInit+0x114>
    253e:	88 ec       	ldi	r24, 0xC8	; 200
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	9c af       	std	Y+60, r25	; 0x3c
    2544:	8b af       	std	Y+59, r24	; 0x3b
    2546:	8b ad       	ldd	r24, Y+59	; 0x3b
    2548:	9c ad       	ldd	r25, Y+60	; 0x3c
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	f1 f7       	brne	.-4      	; 0x254a <HLCD_vInit+0x102>
    254e:	9c af       	std	Y+60, r25	; 0x3c
    2550:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2552:	8d ad       	ldd	r24, Y+61	; 0x3d
    2554:	9e ad       	ldd	r25, Y+62	; 0x3e
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	9e af       	std	Y+62, r25	; 0x3e
    255a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255c:	8d ad       	ldd	r24, Y+61	; 0x3d
    255e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2560:	00 97       	sbiw	r24, 0x00	; 0
    2562:	69 f7       	brne	.-38     	; 0x253e <HLCD_vInit+0xf6>
    2564:	16 c0       	rjmp	.+44     	; 0x2592 <HLCD_vInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2566:	fe 01       	movw	r30, r28
    2568:	ff 96       	adiw	r30, 0x3f	; 63
    256a:	60 81       	ld	r22, Z
    256c:	71 81       	ldd	r23, Z+1	; 0x01
    256e:	82 81       	ldd	r24, Z+2	; 0x02
    2570:	93 81       	ldd	r25, Z+3	; 0x03
    2572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	9e af       	std	Y+62, r25	; 0x3e
    257c:	8d af       	std	Y+61, r24	; 0x3d
    257e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2580:	9e ad       	ldd	r25, Y+62	; 0x3e
    2582:	9a af       	std	Y+58, r25	; 0x3a
    2584:	89 af       	std	Y+57, r24	; 0x39
    2586:	89 ad       	ldd	r24, Y+57	; 0x39
    2588:	9a ad       	ldd	r25, Y+58	; 0x3a
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	f1 f7       	brne	.-4      	; 0x258a <HLCD_vInit+0x142>
    258e:	9a af       	std	Y+58, r25	; 0x3a
    2590:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(50);
	HLCD_vSendCommand(0b00111000);
    2592:	88 e3       	ldi	r24, 0x38	; 56
    2594:	0e 94 04 10 	call	0x2008	; 0x2008 <HLCD_vSendCommand>
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	a0 e8       	ldi	r26, 0x80	; 128
    259e:	bf e3       	ldi	r27, 0x3F	; 63
    25a0:	8d ab       	std	Y+53, r24	; 0x35
    25a2:	9e ab       	std	Y+54, r25	; 0x36
    25a4:	af ab       	std	Y+55, r26	; 0x37
    25a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a8:	6d a9       	ldd	r22, Y+53	; 0x35
    25aa:	7e a9       	ldd	r23, Y+54	; 0x36
    25ac:	8f a9       	ldd	r24, Y+55	; 0x37
    25ae:	98 ad       	ldd	r25, Y+56	; 0x38
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	4a ef       	ldi	r20, 0xFA	; 250
    25b6:	54 e4       	ldi	r21, 0x44	; 68
    25b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	89 ab       	std	Y+49, r24	; 0x31
    25c2:	9a ab       	std	Y+50, r25	; 0x32
    25c4:	ab ab       	std	Y+51, r26	; 0x33
    25c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25c8:	69 a9       	ldd	r22, Y+49	; 0x31
    25ca:	7a a9       	ldd	r23, Y+50	; 0x32
    25cc:	8b a9       	ldd	r24, Y+51	; 0x33
    25ce:	9c a9       	ldd	r25, Y+52	; 0x34
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e8       	ldi	r20, 0x80	; 128
    25d6:	5f e3       	ldi	r21, 0x3F	; 63
    25d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25dc:	88 23       	and	r24, r24
    25de:	2c f4       	brge	.+10     	; 0x25ea <HLCD_vInit+0x1a2>
		__ticks = 1;
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	98 ab       	std	Y+48, r25	; 0x30
    25e6:	8f a7       	std	Y+47, r24	; 0x2f
    25e8:	3f c0       	rjmp	.+126    	; 0x2668 <HLCD_vInit+0x220>
	else if (__tmp > 65535)
    25ea:	69 a9       	ldd	r22, Y+49	; 0x31
    25ec:	7a a9       	ldd	r23, Y+50	; 0x32
    25ee:	8b a9       	ldd	r24, Y+51	; 0x33
    25f0:	9c a9       	ldd	r25, Y+52	; 0x34
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	3f ef       	ldi	r19, 0xFF	; 255
    25f6:	4f e7       	ldi	r20, 0x7F	; 127
    25f8:	57 e4       	ldi	r21, 0x47	; 71
    25fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25fe:	18 16       	cp	r1, r24
    2600:	4c f5       	brge	.+82     	; 0x2654 <HLCD_vInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2602:	6d a9       	ldd	r22, Y+53	; 0x35
    2604:	7e a9       	ldd	r23, Y+54	; 0x36
    2606:	8f a9       	ldd	r24, Y+55	; 0x37
    2608:	98 ad       	ldd	r25, Y+56	; 0x38
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e2       	ldi	r20, 0x20	; 32
    2610:	51 e4       	ldi	r21, 0x41	; 65
    2612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	bc 01       	movw	r22, r24
    261c:	cd 01       	movw	r24, r26
    261e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	98 ab       	std	Y+48, r25	; 0x30
    2628:	8f a7       	std	Y+47, r24	; 0x2f
    262a:	0f c0       	rjmp	.+30     	; 0x264a <HLCD_vInit+0x202>
    262c:	88 ec       	ldi	r24, 0xC8	; 200
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	9e a7       	std	Y+46, r25	; 0x2e
    2632:	8d a7       	std	Y+45, r24	; 0x2d
    2634:	8d a5       	ldd	r24, Y+45	; 0x2d
    2636:	9e a5       	ldd	r25, Y+46	; 0x2e
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	f1 f7       	brne	.-4      	; 0x2638 <HLCD_vInit+0x1f0>
    263c:	9e a7       	std	Y+46, r25	; 0x2e
    263e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2640:	8f a5       	ldd	r24, Y+47	; 0x2f
    2642:	98 a9       	ldd	r25, Y+48	; 0x30
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	98 ab       	std	Y+48, r25	; 0x30
    2648:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264a:	8f a5       	ldd	r24, Y+47	; 0x2f
    264c:	98 a9       	ldd	r25, Y+48	; 0x30
    264e:	00 97       	sbiw	r24, 0x00	; 0
    2650:	69 f7       	brne	.-38     	; 0x262c <HLCD_vInit+0x1e4>
    2652:	14 c0       	rjmp	.+40     	; 0x267c <HLCD_vInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2654:	69 a9       	ldd	r22, Y+49	; 0x31
    2656:	7a a9       	ldd	r23, Y+50	; 0x32
    2658:	8b a9       	ldd	r24, Y+51	; 0x33
    265a:	9c a9       	ldd	r25, Y+52	; 0x34
    265c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	98 ab       	std	Y+48, r25	; 0x30
    2666:	8f a7       	std	Y+47, r24	; 0x2f
    2668:	8f a5       	ldd	r24, Y+47	; 0x2f
    266a:	98 a9       	ldd	r25, Y+48	; 0x30
    266c:	9c a7       	std	Y+44, r25	; 0x2c
    266e:	8b a7       	std	Y+43, r24	; 0x2b
    2670:	8b a5       	ldd	r24, Y+43	; 0x2b
    2672:	9c a5       	ldd	r25, Y+44	; 0x2c
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	f1 f7       	brne	.-4      	; 0x2674 <HLCD_vInit+0x22c>
    2678:	9c a7       	std	Y+44, r25	; 0x2c
    267a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	HLCD_vSendCommand(0b00001100);
    267c:	8c e0       	ldi	r24, 0x0C	; 12
    267e:	0e 94 04 10 	call	0x2008	; 0x2008 <HLCD_vSendCommand>
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	a0 e8       	ldi	r26, 0x80	; 128
    2688:	bf e3       	ldi	r27, 0x3F	; 63
    268a:	8f a3       	std	Y+39, r24	; 0x27
    268c:	98 a7       	std	Y+40, r25	; 0x28
    268e:	a9 a7       	std	Y+41, r26	; 0x29
    2690:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2692:	6f a1       	ldd	r22, Y+39	; 0x27
    2694:	78 a5       	ldd	r23, Y+40	; 0x28
    2696:	89 a5       	ldd	r24, Y+41	; 0x29
    2698:	9a a5       	ldd	r25, Y+42	; 0x2a
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	4a ef       	ldi	r20, 0xFA	; 250
    26a0:	54 e4       	ldi	r21, 0x44	; 68
    26a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	8b a3       	std	Y+35, r24	; 0x23
    26ac:	9c a3       	std	Y+36, r25	; 0x24
    26ae:	ad a3       	std	Y+37, r26	; 0x25
    26b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26b2:	6b a1       	ldd	r22, Y+35	; 0x23
    26b4:	7c a1       	ldd	r23, Y+36	; 0x24
    26b6:	8d a1       	ldd	r24, Y+37	; 0x25
    26b8:	9e a1       	ldd	r25, Y+38	; 0x26
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	40 e8       	ldi	r20, 0x80	; 128
    26c0:	5f e3       	ldi	r21, 0x3F	; 63
    26c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26c6:	88 23       	and	r24, r24
    26c8:	2c f4       	brge	.+10     	; 0x26d4 <HLCD_vInit+0x28c>
		__ticks = 1;
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	9a a3       	std	Y+34, r25	; 0x22
    26d0:	89 a3       	std	Y+33, r24	; 0x21
    26d2:	3f c0       	rjmp	.+126    	; 0x2752 <HLCD_vInit+0x30a>
	else if (__tmp > 65535)
    26d4:	6b a1       	ldd	r22, Y+35	; 0x23
    26d6:	7c a1       	ldd	r23, Y+36	; 0x24
    26d8:	8d a1       	ldd	r24, Y+37	; 0x25
    26da:	9e a1       	ldd	r25, Y+38	; 0x26
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	3f ef       	ldi	r19, 0xFF	; 255
    26e0:	4f e7       	ldi	r20, 0x7F	; 127
    26e2:	57 e4       	ldi	r21, 0x47	; 71
    26e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26e8:	18 16       	cp	r1, r24
    26ea:	4c f5       	brge	.+82     	; 0x273e <HLCD_vInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ec:	6f a1       	ldd	r22, Y+39	; 0x27
    26ee:	78 a5       	ldd	r23, Y+40	; 0x28
    26f0:	89 a5       	ldd	r24, Y+41	; 0x29
    26f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	40 e2       	ldi	r20, 0x20	; 32
    26fa:	51 e4       	ldi	r21, 0x41	; 65
    26fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	bc 01       	movw	r22, r24
    2706:	cd 01       	movw	r24, r26
    2708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	9a a3       	std	Y+34, r25	; 0x22
    2712:	89 a3       	std	Y+33, r24	; 0x21
    2714:	0f c0       	rjmp	.+30     	; 0x2734 <HLCD_vInit+0x2ec>
    2716:	88 ec       	ldi	r24, 0xC8	; 200
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	98 a3       	std	Y+32, r25	; 0x20
    271c:	8f 8f       	std	Y+31, r24	; 0x1f
    271e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2720:	98 a1       	ldd	r25, Y+32	; 0x20
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	f1 f7       	brne	.-4      	; 0x2722 <HLCD_vInit+0x2da>
    2726:	98 a3       	std	Y+32, r25	; 0x20
    2728:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272a:	89 a1       	ldd	r24, Y+33	; 0x21
    272c:	9a a1       	ldd	r25, Y+34	; 0x22
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	9a a3       	std	Y+34, r25	; 0x22
    2732:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2734:	89 a1       	ldd	r24, Y+33	; 0x21
    2736:	9a a1       	ldd	r25, Y+34	; 0x22
    2738:	00 97       	sbiw	r24, 0x00	; 0
    273a:	69 f7       	brne	.-38     	; 0x2716 <HLCD_vInit+0x2ce>
    273c:	14 c0       	rjmp	.+40     	; 0x2766 <HLCD_vInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273e:	6b a1       	ldd	r22, Y+35	; 0x23
    2740:	7c a1       	ldd	r23, Y+36	; 0x24
    2742:	8d a1       	ldd	r24, Y+37	; 0x25
    2744:	9e a1       	ldd	r25, Y+38	; 0x26
    2746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	9a a3       	std	Y+34, r25	; 0x22
    2750:	89 a3       	std	Y+33, r24	; 0x21
    2752:	89 a1       	ldd	r24, Y+33	; 0x21
    2754:	9a a1       	ldd	r25, Y+34	; 0x22
    2756:	9e 8f       	std	Y+30, r25	; 0x1e
    2758:	8d 8f       	std	Y+29, r24	; 0x1d
    275a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    275c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	f1 f7       	brne	.-4      	; 0x275e <HLCD_vInit+0x316>
    2762:	9e 8f       	std	Y+30, r25	; 0x1e
    2764:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	HLCD_vSendCommand(0b00000001);
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	0e 94 04 10 	call	0x2008	; 0x2008 <HLCD_vSendCommand>
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	a0 e4       	ldi	r26, 0x40	; 64
    2772:	b0 e4       	ldi	r27, 0x40	; 64
    2774:	89 8f       	std	Y+25, r24	; 0x19
    2776:	9a 8f       	std	Y+26, r25	; 0x1a
    2778:	ab 8f       	std	Y+27, r26	; 0x1b
    277a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277c:	69 8d       	ldd	r22, Y+25	; 0x19
    277e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2780:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2782:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	4a ef       	ldi	r20, 0xFA	; 250
    278a:	54 e4       	ldi	r21, 0x44	; 68
    278c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	8d 8b       	std	Y+21, r24	; 0x15
    2796:	9e 8b       	std	Y+22, r25	; 0x16
    2798:	af 8b       	std	Y+23, r26	; 0x17
    279a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    279c:	6d 89       	ldd	r22, Y+21	; 0x15
    279e:	7e 89       	ldd	r23, Y+22	; 0x16
    27a0:	8f 89       	ldd	r24, Y+23	; 0x17
    27a2:	98 8d       	ldd	r25, Y+24	; 0x18
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e8       	ldi	r20, 0x80	; 128
    27aa:	5f e3       	ldi	r21, 0x3F	; 63
    27ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27b0:	88 23       	and	r24, r24
    27b2:	2c f4       	brge	.+10     	; 0x27be <HLCD_vInit+0x376>
		__ticks = 1;
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	9c 8b       	std	Y+20, r25	; 0x14
    27ba:	8b 8b       	std	Y+19, r24	; 0x13
    27bc:	3f c0       	rjmp	.+126    	; 0x283c <HLCD_vInit+0x3f4>
	else if (__tmp > 65535)
    27be:	6d 89       	ldd	r22, Y+21	; 0x15
    27c0:	7e 89       	ldd	r23, Y+22	; 0x16
    27c2:	8f 89       	ldd	r24, Y+23	; 0x17
    27c4:	98 8d       	ldd	r25, Y+24	; 0x18
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	3f ef       	ldi	r19, 0xFF	; 255
    27ca:	4f e7       	ldi	r20, 0x7F	; 127
    27cc:	57 e4       	ldi	r21, 0x47	; 71
    27ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d2:	18 16       	cp	r1, r24
    27d4:	4c f5       	brge	.+82     	; 0x2828 <HLCD_vInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d6:	69 8d       	ldd	r22, Y+25	; 0x19
    27d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 e2       	ldi	r20, 0x20	; 32
    27e4:	51 e4       	ldi	r21, 0x41	; 65
    27e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	9c 8b       	std	Y+20, r25	; 0x14
    27fc:	8b 8b       	std	Y+19, r24	; 0x13
    27fe:	0f c0       	rjmp	.+30     	; 0x281e <HLCD_vInit+0x3d6>
    2800:	88 ec       	ldi	r24, 0xC8	; 200
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	9a 8b       	std	Y+18, r25	; 0x12
    2806:	89 8b       	std	Y+17, r24	; 0x11
    2808:	89 89       	ldd	r24, Y+17	; 0x11
    280a:	9a 89       	ldd	r25, Y+18	; 0x12
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	f1 f7       	brne	.-4      	; 0x280c <HLCD_vInit+0x3c4>
    2810:	9a 8b       	std	Y+18, r25	; 0x12
    2812:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2814:	8b 89       	ldd	r24, Y+19	; 0x13
    2816:	9c 89       	ldd	r25, Y+20	; 0x14
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	9c 8b       	std	Y+20, r25	; 0x14
    281c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281e:	8b 89       	ldd	r24, Y+19	; 0x13
    2820:	9c 89       	ldd	r25, Y+20	; 0x14
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	69 f7       	brne	.-38     	; 0x2800 <HLCD_vInit+0x3b8>
    2826:	14 c0       	rjmp	.+40     	; 0x2850 <HLCD_vInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2828:	6d 89       	ldd	r22, Y+21	; 0x15
    282a:	7e 89       	ldd	r23, Y+22	; 0x16
    282c:	8f 89       	ldd	r24, Y+23	; 0x17
    282e:	98 8d       	ldd	r25, Y+24	; 0x18
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	9c 8b       	std	Y+20, r25	; 0x14
    283a:	8b 8b       	std	Y+19, r24	; 0x13
    283c:	8b 89       	ldd	r24, Y+19	; 0x13
    283e:	9c 89       	ldd	r25, Y+20	; 0x14
    2840:	98 8b       	std	Y+16, r25	; 0x10
    2842:	8f 87       	std	Y+15, r24	; 0x0f
    2844:	8f 85       	ldd	r24, Y+15	; 0x0f
    2846:	98 89       	ldd	r25, Y+16	; 0x10
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <HLCD_vInit+0x400>
    284c:	98 8b       	std	Y+16, r25	; 0x10
    284e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	HLCD_vSendCommand(0b00000110);
    2850:	86 e0       	ldi	r24, 0x06	; 6
    2852:	0e 94 04 10 	call	0x2008	; 0x2008 <HLCD_vSendCommand>
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	a0 e8       	ldi	r26, 0x80	; 128
    285c:	bf e3       	ldi	r27, 0x3F	; 63
    285e:	8b 87       	std	Y+11, r24	; 0x0b
    2860:	9c 87       	std	Y+12, r25	; 0x0c
    2862:	ad 87       	std	Y+13, r26	; 0x0d
    2864:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2866:	6b 85       	ldd	r22, Y+11	; 0x0b
    2868:	7c 85       	ldd	r23, Y+12	; 0x0c
    286a:	8d 85       	ldd	r24, Y+13	; 0x0d
    286c:	9e 85       	ldd	r25, Y+14	; 0x0e
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	4a ef       	ldi	r20, 0xFA	; 250
    2874:	54 e4       	ldi	r21, 0x44	; 68
    2876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	8f 83       	std	Y+7, r24	; 0x07
    2880:	98 87       	std	Y+8, r25	; 0x08
    2882:	a9 87       	std	Y+9, r26	; 0x09
    2884:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2886:	6f 81       	ldd	r22, Y+7	; 0x07
    2888:	78 85       	ldd	r23, Y+8	; 0x08
    288a:	89 85       	ldd	r24, Y+9	; 0x09
    288c:	9a 85       	ldd	r25, Y+10	; 0x0a
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e8       	ldi	r20, 0x80	; 128
    2894:	5f e3       	ldi	r21, 0x3F	; 63
    2896:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    289a:	88 23       	and	r24, r24
    289c:	2c f4       	brge	.+10     	; 0x28a8 <HLCD_vInit+0x460>
		__ticks = 1;
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	9e 83       	std	Y+6, r25	; 0x06
    28a4:	8d 83       	std	Y+5, r24	; 0x05
    28a6:	3f c0       	rjmp	.+126    	; 0x2926 <HLCD_vInit+0x4de>
	else if (__tmp > 65535)
    28a8:	6f 81       	ldd	r22, Y+7	; 0x07
    28aa:	78 85       	ldd	r23, Y+8	; 0x08
    28ac:	89 85       	ldd	r24, Y+9	; 0x09
    28ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	3f ef       	ldi	r19, 0xFF	; 255
    28b4:	4f e7       	ldi	r20, 0x7F	; 127
    28b6:	57 e4       	ldi	r21, 0x47	; 71
    28b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28bc:	18 16       	cp	r1, r24
    28be:	4c f5       	brge	.+82     	; 0x2912 <HLCD_vInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e2       	ldi	r20, 0x20	; 32
    28ce:	51 e4       	ldi	r21, 0x41	; 65
    28d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	bc 01       	movw	r22, r24
    28da:	cd 01       	movw	r24, r26
    28dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	9e 83       	std	Y+6, r25	; 0x06
    28e6:	8d 83       	std	Y+5, r24	; 0x05
    28e8:	0f c0       	rjmp	.+30     	; 0x2908 <HLCD_vInit+0x4c0>
    28ea:	88 ec       	ldi	r24, 0xC8	; 200
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	9c 83       	std	Y+4, r25	; 0x04
    28f0:	8b 83       	std	Y+3, r24	; 0x03
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	9c 81       	ldd	r25, Y+4	; 0x04
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	f1 f7       	brne	.-4      	; 0x28f6 <HLCD_vInit+0x4ae>
    28fa:	9c 83       	std	Y+4, r25	; 0x04
    28fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2900:	9e 81       	ldd	r25, Y+6	; 0x06
    2902:	01 97       	sbiw	r24, 0x01	; 1
    2904:	9e 83       	std	Y+6, r25	; 0x06
    2906:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2908:	8d 81       	ldd	r24, Y+5	; 0x05
    290a:	9e 81       	ldd	r25, Y+6	; 0x06
    290c:	00 97       	sbiw	r24, 0x00	; 0
    290e:	69 f7       	brne	.-38     	; 0x28ea <HLCD_vInit+0x4a2>
    2910:	14 c0       	rjmp	.+40     	; 0x293a <HLCD_vInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2912:	6f 81       	ldd	r22, Y+7	; 0x07
    2914:	78 85       	ldd	r23, Y+8	; 0x08
    2916:	89 85       	ldd	r24, Y+9	; 0x09
    2918:	9a 85       	ldd	r25, Y+10	; 0x0a
    291a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	9e 83       	std	Y+6, r25	; 0x06
    2924:	8d 83       	std	Y+5, r24	; 0x05
    2926:	8d 81       	ldd	r24, Y+5	; 0x05
    2928:	9e 81       	ldd	r25, Y+6	; 0x06
    292a:	9a 83       	std	Y+2, r25	; 0x02
    292c:	89 83       	std	Y+1, r24	; 0x01
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	9a 81       	ldd	r25, Y+2	; 0x02
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	f1 f7       	brne	.-4      	; 0x2932 <HLCD_vInit+0x4ea>
    2936:	9a 83       	std	Y+2, r25	; 0x02
    2938:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    293a:	ca 5b       	subi	r28, 0xBA	; 186
    293c:	df 4f       	sbci	r29, 0xFF	; 255
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	f8 94       	cli
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	cd bf       	out	0x3d, r28	; 61
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	1f 91       	pop	r17
    294e:	0f 91       	pop	r16
    2950:	08 95       	ret

00002952 <HLCD_vPrintString>:


void HLCD_vPrintString(u8 A_s8String[])
{
    2952:	df 93       	push	r29
    2954:	cf 93       	push	r28
    2956:	00 d0       	rcall	.+0      	; 0x2958 <HLCD_vPrintString+0x6>
    2958:	0f 92       	push	r0
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	9b 83       	std	Y+3, r25	; 0x03
    2960:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 L_u8I = 0 ; A_s8String[L_u8I] != '\0' ; L_u8I++)
    2962:	19 82       	std	Y+1, r1	; 0x01
    2964:	0e c0       	rjmp	.+28     	; 0x2982 <HLCD_vPrintString+0x30>
	{
		HLCD_vSendChar(A_s8String[L_u8I]);
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	28 2f       	mov	r18, r24
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	8a 81       	ldd	r24, Y+2	; 0x02
    296e:	9b 81       	ldd	r25, Y+3	; 0x03
    2970:	fc 01       	movw	r30, r24
    2972:	e2 0f       	add	r30, r18
    2974:	f3 1f       	adc	r31, r19
    2976:	80 81       	ld	r24, Z
    2978:	0e 94 14 11 	call	0x2228	; 0x2228 <HLCD_vSendChar>
}


void HLCD_vPrintString(u8 A_s8String[])
{
	for(u8 L_u8I = 0 ; A_s8String[L_u8I] != '\0' ; L_u8I++)
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	8f 5f       	subi	r24, 0xFF	; 255
    2980:	89 83       	std	Y+1, r24	; 0x01
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	28 2f       	mov	r18, r24
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	8a 81       	ldd	r24, Y+2	; 0x02
    298a:	9b 81       	ldd	r25, Y+3	; 0x03
    298c:	fc 01       	movw	r30, r24
    298e:	e2 0f       	add	r30, r18
    2990:	f3 1f       	adc	r31, r19
    2992:	80 81       	ld	r24, Z
    2994:	88 23       	and	r24, r24
    2996:	39 f7       	brne	.-50     	; 0x2966 <HLCD_vPrintString+0x14>
		HLCD_vSendChar(A_s8String[L_u8I]);

	}


}
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	cf 91       	pop	r28
    29a0:	df 91       	pop	r29
    29a2:	08 95       	ret

000029a4 <HLCD_vPrintNumber>:


void HLCD_vPrintNumber(s32 A_s32Number)
{
    29a4:	0f 93       	push	r16
    29a6:	1f 93       	push	r17
    29a8:	df 93       	push	r29
    29aa:	cf 93       	push	r28
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
    29b0:	60 97       	sbiw	r28, 0x10	; 16
    29b2:	0f b6       	in	r0, 0x3f	; 63
    29b4:	f8 94       	cli
    29b6:	de bf       	out	0x3e, r29	; 62
    29b8:	0f be       	out	0x3f, r0	; 63
    29ba:	cd bf       	out	0x3d, r28	; 61
    29bc:	6d 87       	std	Y+13, r22	; 0x0d
    29be:	7e 87       	std	Y+14, r23	; 0x0e
    29c0:	8f 87       	std	Y+15, r24	; 0x0f
    29c2:	98 8b       	std	Y+16, r25	; 0x10
	u8 L_u8Digits[10]={0};
    29c4:	8a e0       	ldi	r24, 0x0A	; 10
    29c6:	fe 01       	movw	r30, r28
    29c8:	33 96       	adiw	r30, 0x03	; 3
    29ca:	df 01       	movw	r26, r30
    29cc:	98 2f       	mov	r25, r24
    29ce:	1d 92       	st	X+, r1
    29d0:	9a 95       	dec	r25
    29d2:	e9 f7       	brne	.-6      	; 0x29ce <HLCD_vPrintNumber+0x2a>
	u8 L_u8counter = 0;
    29d4:	1a 82       	std	Y+2, r1	; 0x02
    29d6:	2d c0       	rjmp	.+90     	; 0x2a32 <HLCD_vPrintNumber+0x8e>
	while(A_s32Number >0)
	{
		L_u8Digits[L_u8counter]=A_s32Number%10;
    29d8:	8a 81       	ldd	r24, Y+2	; 0x02
    29da:	08 2f       	mov	r16, r24
    29dc:	10 e0       	ldi	r17, 0x00	; 0
    29de:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e2:	af 85       	ldd	r26, Y+15	; 0x0f
    29e4:	b8 89       	ldd	r27, Y+16	; 0x10
    29e6:	2a e0       	ldi	r18, 0x0A	; 10
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	40 e0       	ldi	r20, 0x00	; 0
    29ec:	50 e0       	ldi	r21, 0x00	; 0
    29ee:	bc 01       	movw	r22, r24
    29f0:	cd 01       	movw	r24, r26
    29f2:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__divmodsi4>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	28 2f       	mov	r18, r24
    29fc:	ce 01       	movw	r24, r28
    29fe:	03 96       	adiw	r24, 0x03	; 3
    2a00:	fc 01       	movw	r30, r24
    2a02:	e0 0f       	add	r30, r16
    2a04:	f1 1f       	adc	r31, r17
    2a06:	20 83       	st	Z, r18
		L_u8counter++;
    2a08:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0a:	8f 5f       	subi	r24, 0xFF	; 255
    2a0c:	8a 83       	std	Y+2, r24	; 0x02
		A_s32Number/=10 ;
    2a0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a12:	af 85       	ldd	r26, Y+15	; 0x0f
    2a14:	b8 89       	ldd	r27, Y+16	; 0x10
    2a16:	2a e0       	ldi	r18, 0x0A	; 10
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	40 e0       	ldi	r20, 0x00	; 0
    2a1c:	50 e0       	ldi	r21, 0x00	; 0
    2a1e:	bc 01       	movw	r22, r24
    2a20:	cd 01       	movw	r24, r26
    2a22:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__divmodsi4>
    2a26:	da 01       	movw	r26, r20
    2a28:	c9 01       	movw	r24, r18
    2a2a:	8d 87       	std	Y+13, r24	; 0x0d
    2a2c:	9e 87       	std	Y+14, r25	; 0x0e
    2a2e:	af 87       	std	Y+15, r26	; 0x0f
    2a30:	b8 8b       	std	Y+16, r27	; 0x10

void HLCD_vPrintNumber(s32 A_s32Number)
{
	u8 L_u8Digits[10]={0};
	u8 L_u8counter = 0;
	while(A_s32Number >0)
    2a32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a36:	af 85       	ldd	r26, Y+15	; 0x0f
    2a38:	b8 89       	ldd	r27, Y+16	; 0x10
    2a3a:	18 16       	cp	r1, r24
    2a3c:	19 06       	cpc	r1, r25
    2a3e:	1a 06       	cpc	r1, r26
    2a40:	1b 06       	cpc	r1, r27
    2a42:	54 f2       	brlt	.-108    	; 0x29d8 <HLCD_vPrintNumber+0x34>
	{
		L_u8Digits[L_u8counter]=A_s32Number%10;
		L_u8counter++;
		A_s32Number/=10 ;
	}
	for(s8 L_s8loop=L_u8counter-1;L_s8loop>=0;L_s8loop--)
    2a44:	8a 81       	ldd	r24, Y+2	; 0x02
    2a46:	81 50       	subi	r24, 0x01	; 1
    2a48:	89 83       	std	Y+1, r24	; 0x01
    2a4a:	11 c0       	rjmp	.+34     	; 0x2a6e <HLCD_vPrintNumber+0xca>
		HLCD_vSendChar('0'+L_u8Digits[L_s8loop]);
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	28 2f       	mov	r18, r24
    2a50:	33 27       	eor	r19, r19
    2a52:	27 fd       	sbrc	r18, 7
    2a54:	30 95       	com	r19
    2a56:	ce 01       	movw	r24, r28
    2a58:	03 96       	adiw	r24, 0x03	; 3
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	e2 0f       	add	r30, r18
    2a5e:	f3 1f       	adc	r31, r19
    2a60:	80 81       	ld	r24, Z
    2a62:	80 5d       	subi	r24, 0xD0	; 208
    2a64:	0e 94 14 11 	call	0x2228	; 0x2228 <HLCD_vSendChar>
	{
		L_u8Digits[L_u8counter]=A_s32Number%10;
		L_u8counter++;
		A_s32Number/=10 ;
	}
	for(s8 L_s8loop=L_u8counter-1;L_s8loop>=0;L_s8loop--)
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	81 50       	subi	r24, 0x01	; 1
    2a6c:	89 83       	std	Y+1, r24	; 0x01
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	88 23       	and	r24, r24
    2a72:	64 f7       	brge	.-40     	; 0x2a4c <HLCD_vPrintNumber+0xa8>
		HLCD_vSendChar('0'+L_u8Digits[L_s8loop]);
}
    2a74:	60 96       	adiw	r28, 0x10	; 16
    2a76:	0f b6       	in	r0, 0x3f	; 63
    2a78:	f8 94       	cli
    2a7a:	de bf       	out	0x3e, r29	; 62
    2a7c:	0f be       	out	0x3f, r0	; 63
    2a7e:	cd bf       	out	0x3d, r28	; 61
    2a80:	cf 91       	pop	r28
    2a82:	df 91       	pop	r29
    2a84:	1f 91       	pop	r17
    2a86:	0f 91       	pop	r16
    2a88:	08 95       	ret

00002a8a <HLCD_vGoToXY>:

void HLCD_vGoToXY(u8 A_u8Row , u8 A_u8Col)
{
    2a8a:	df 93       	push	r29
    2a8c:	cf 93       	push	r28
    2a8e:	00 d0       	rcall	.+0      	; 0x2a90 <HLCD_vGoToXY+0x6>
    2a90:	0f 92       	push	r0
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    2a96:	8a 83       	std	Y+2, r24	; 0x02
    2a98:	6b 83       	std	Y+3, r22	; 0x03

	u8 L_u8DdramAdderss ;

	if( (A_u8Row < MAX_IDX_OF_ROW) && (A_u8Col < MAX_IDX_OF_COL) )
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	82 30       	cpi	r24, 0x02	; 2
    2a9e:	90 f4       	brcc	.+36     	; 0x2ac4 <HLCD_vGoToXY+0x3a>
    2aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa2:	80 31       	cpi	r24, 0x10	; 16
    2aa4:	78 f4       	brcc	.+30     	; 0x2ac4 <HLCD_vGoToXY+0x3a>
	{
		if(A_u8Row == FIRST_ROW_IDX)
    2aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa8:	88 23       	and	r24, r24
    2aaa:	19 f4       	brne	.+6      	; 0x2ab2 <HLCD_vGoToXY+0x28>
		{
			L_u8DdramAdderss = FIRST_ROW_START + A_u8Col;
    2aac:	8b 81       	ldd	r24, Y+3	; 0x03
    2aae:	89 83       	std	Y+1, r24	; 0x01
    2ab0:	03 c0       	rjmp	.+6      	; 0x2ab8 <HLCD_vGoToXY+0x2e>
		}
		else
		{
			L_u8DdramAdderss = SEC_ROW_START + A_u8Col;
    2ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab4:	80 5c       	subi	r24, 0xC0	; 192
    2ab6:	89 83       	std	Y+1, r24	; 0x01
		}

		SET_BIT(L_u8DdramAdderss , 7);
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	80 68       	ori	r24, 0x80	; 128
    2abc:	89 83       	std	Y+1, r24	; 0x01
		HLCD_vSendCommand(L_u8DdramAdderss);
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	0e 94 04 10 	call	0x2008	; 0x2008 <HLCD_vSendCommand>
	else
	{
		/*dont do eny thing*/
	}

}
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	08 95       	ret

00002ad0 <HLCD_vSaveCustomChar>:




void HLCD_vSaveCustomChar(u8 A_u8PatternIdx , u8 A_PatternValue[])
{
    2ad0:	df 93       	push	r29
    2ad2:	cf 93       	push	r28
    2ad4:	00 d0       	rcall	.+0      	; 0x2ad6 <HLCD_vSaveCustomChar+0x6>
    2ad6:	00 d0       	rcall	.+0      	; 0x2ad8 <HLCD_vSaveCustomChar+0x8>
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
    2adc:	8a 83       	std	Y+2, r24	; 0x02
    2ade:	7c 83       	std	Y+4, r23	; 0x04
    2ae0:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8LoopIterator;
/*SET CURSOR POTHSION TO CGRAM*/
	HLCD_vSendCommand(0b01000000 + (A_u8PatternIdx*8) ) ;
    2ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae4:	88 2f       	mov	r24, r24
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	08 96       	adiw	r24, 0x08	; 8
    2aea:	88 0f       	add	r24, r24
    2aec:	99 1f       	adc	r25, r25
    2aee:	88 0f       	add	r24, r24
    2af0:	99 1f       	adc	r25, r25
    2af2:	88 0f       	add	r24, r24
    2af4:	99 1f       	adc	r25, r25
    2af6:	0e 94 04 10 	call	0x2008	; 0x2008 <HLCD_vSendCommand>

	/*SAVE CUSTEM CHAR*/
	for (L_u8LoopIterator = 0; L_u8LoopIterator < 8 ; L_u8LoopIterator++)
    2afa:	19 82       	std	Y+1, r1	; 0x01
    2afc:	0e c0       	rjmp	.+28     	; 0x2b1a <HLCD_vSaveCustomChar+0x4a>
	{
		HLCD_vSendChar(A_PatternValue[L_u8LoopIterator]);
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	28 2f       	mov	r18, r24
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	8b 81       	ldd	r24, Y+3	; 0x03
    2b06:	9c 81       	ldd	r25, Y+4	; 0x04
    2b08:	fc 01       	movw	r30, r24
    2b0a:	e2 0f       	add	r30, r18
    2b0c:	f3 1f       	adc	r31, r19
    2b0e:	80 81       	ld	r24, Z
    2b10:	0e 94 14 11 	call	0x2228	; 0x2228 <HLCD_vSendChar>
	u8 L_u8LoopIterator;
/*SET CURSOR POTHSION TO CGRAM*/
	HLCD_vSendCommand(0b01000000 + (A_u8PatternIdx*8) ) ;

	/*SAVE CUSTEM CHAR*/
	for (L_u8LoopIterator = 0; L_u8LoopIterator < 8 ; L_u8LoopIterator++)
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	8f 5f       	subi	r24, 0xFF	; 255
    2b18:	89 83       	std	Y+1, r24	; 0x01
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	88 30       	cpi	r24, 0x08	; 8
    2b1e:	78 f3       	brcs	.-34     	; 0x2afe <HLCD_vSaveCustomChar+0x2e>
	{
		HLCD_vSendChar(A_PatternValue[L_u8LoopIterator]);
	}
	/*SET CURSOR POTHSION TO CGROM*/
	HLCD_vSendCommand(0x80);
    2b20:	80 e8       	ldi	r24, 0x80	; 128
    2b22:	0e 94 04 10 	call	0x2008	; 0x2008 <HLCD_vSendCommand>

}
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	08 95       	ret

00002b34 <HLCD_vDisplayCustomChar>:


void HLCD_vDisplayCustomChar(u8 A_u8CgramIndex)
{
    2b34:	df 93       	push	r29
    2b36:	cf 93       	push	r28
    2b38:	0f 92       	push	r0
    2b3a:	cd b7       	in	r28, 0x3d	; 61
    2b3c:	de b7       	in	r29, 0x3e	; 62
    2b3e:	89 83       	std	Y+1, r24	; 0x01
	if(A_u8CgramIndex < 8 )
    2b40:	89 81       	ldd	r24, Y+1	; 0x01
    2b42:	88 30       	cpi	r24, 0x08	; 8
    2b44:	18 f4       	brcc	.+6      	; 0x2b4c <HLCD_vDisplayCustomChar+0x18>
	{
		HLCD_vSendChar(A_u8CgramIndex);
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
    2b48:	0e 94 14 11 	call	0x2228	; 0x2228 <HLCD_vSendChar>
	}
}
    2b4c:	0f 90       	pop	r0
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	08 95       	ret

00002b54 <HLCD_vClearDisplay>:

void HLCD_vClearDisplay(void)
{
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	cd b7       	in	r28, 0x3d	; 61
    2b5a:	de b7       	in	r29, 0x3e	; 62


	HLCD_vSendCommand(CLEAR_COMD);
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	0e 94 04 10 	call	0x2008	; 0x2008 <HLCD_vSendCommand>
}
    2b62:	cf 91       	pop	r28
    2b64:	df 91       	pop	r29
    2b66:	08 95       	ret

00002b68 <HLCD_vShiftPostion>:
void HLCD_vShiftPostion(u8 L_u8TypeOfShifting)
{
    2b68:	df 93       	push	r29
    2b6a:	cf 93       	push	r28
    2b6c:	0f 92       	push	r0
    2b6e:	cd b7       	in	r28, 0x3d	; 61
    2b70:	de b7       	in	r29, 0x3e	; 62
    2b72:	89 83       	std	Y+1, r24	; 0x01
	if(L_u8TypeOfShifting == SHIFT_LEFT)
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	80 31       	cpi	r24, 0x10	; 16
    2b78:	21 f4       	brne	.+8      	; 0x2b82 <HLCD_vShiftPostion+0x1a>
		HLCD_vSendCommand(SHIFT_LEFT);
    2b7a:	80 e1       	ldi	r24, 0x10	; 16
    2b7c:	0e 94 04 10 	call	0x2008	; 0x2008 <HLCD_vSendCommand>
    2b80:	06 c0       	rjmp	.+12     	; 0x2b8e <HLCD_vShiftPostion+0x26>
	else if(L_u8TypeOfShifting == SHIFT_RIGHT)
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
    2b84:	84 31       	cpi	r24, 0x14	; 20
    2b86:	19 f4       	brne	.+6      	; 0x2b8e <HLCD_vShiftPostion+0x26>
		HLCD_vSendCommand(SHIFT_RIGHT);
    2b88:	84 e1       	ldi	r24, 0x14	; 20
    2b8a:	0e 94 04 10 	call	0x2008	; 0x2008 <HLCD_vSendCommand>

}
    2b8e:	0f 90       	pop	r0
    2b90:	cf 91       	pop	r28
    2b92:	df 91       	pop	r29
    2b94:	08 95       	ret

00002b96 <HKPD_vInit>:
};



void HKPD_vInit(void)
{
    2b96:	df 93       	push	r29
    2b98:	cf 93       	push	r28
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPortDir(KPD_PORT, 0x0f);
    2b9e:	82 e0       	ldi	r24, 0x02	; 2
    2ba0:	6f e0       	ldi	r22, 0x0F	; 15
    2ba2:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <MDIO_vSetPortDir>
	MDIO_vSetPortVal(KPD_PORT, 0xff);
    2ba6:	82 e0       	ldi	r24, 0x02	; 2
    2ba8:	6f ef       	ldi	r22, 0xFF	; 255
    2baa:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <MDIO_vSetPortVal>
}
    2bae:	cf 91       	pop	r28
    2bb0:	df 91       	pop	r29
    2bb2:	08 95       	ret

00002bb4 <HKPD_u8GetPressedKey>:

u8   HKPD_u8GetPressedKey(void)
{
    2bb4:	df 93       	push	r29
    2bb6:	cf 93       	push	r28
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
    2bbc:	61 97       	sbiw	r28, 0x11	; 17
    2bbe:	0f b6       	in	r0, 0x3f	; 63
    2bc0:	f8 94       	cli
    2bc2:	de bf       	out	0x3e, r29	; 62
    2bc4:	0f be       	out	0x3f, r0	; 63
    2bc6:	cd bf       	out	0x3d, r28	; 61
	u8 pressed_key = 0 ;
    2bc8:	19 8a       	std	Y+17, r1	; 0x11
	for(u8 col=0; col<4; col++)
    2bca:	18 8a       	std	Y+16, r1	; 0x10
    2bcc:	ac c0       	rjmp	.+344    	; 0x2d26 <HKPD_u8GetPressedKey+0x172>
	{
		/* activate current column */
		MDIO_vSetPinVal(KPD_PORT, col, DIO_LOW);
    2bce:	82 e0       	ldi	r24, 0x02	; 2
    2bd0:	68 89       	ldd	r22, Y+16	; 0x10
    2bd2:	40 e0       	ldi	r20, 0x00	; 0
    2bd4:	0e 94 19 0c 	call	0x1832	; 0x1832 <MDIO_vSetPinVal>
		for(u8 row=0; row < 4; row++)
    2bd8:	1f 86       	std	Y+15, r1	; 0x0f
    2bda:	99 c0       	rjmp	.+306    	; 0x2d0e <HKPD_u8GetPressedKey+0x15a>
		{
			if(MDIO_u8GetPinVal(KPD_PORT, row+4) == 0) // a button in pressed
    2bdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bde:	98 2f       	mov	r25, r24
    2be0:	9c 5f       	subi	r25, 0xFC	; 252
    2be2:	82 e0       	ldi	r24, 0x02	; 2
    2be4:	69 2f       	mov	r22, r25
    2be6:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <MDIO_u8GetPinVal>
    2bea:	88 23       	and	r24, r24
    2bec:	91 f4       	brne	.+36     	; 0x2c12 <HKPD_u8GetPressedKey+0x5e>
			{
				pressed_key = G_u8KeyMab[row][col] ;
    2bee:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bf0:	48 2f       	mov	r20, r24
    2bf2:	50 e0       	ldi	r21, 0x00	; 0
    2bf4:	88 89       	ldd	r24, Y+16	; 0x10
    2bf6:	28 2f       	mov	r18, r24
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	ca 01       	movw	r24, r20
    2bfc:	88 0f       	add	r24, r24
    2bfe:	99 1f       	adc	r25, r25
    2c00:	88 0f       	add	r24, r24
    2c02:	99 1f       	adc	r25, r25
    2c04:	82 0f       	add	r24, r18
    2c06:	93 1f       	adc	r25, r19
    2c08:	fc 01       	movw	r30, r24
    2c0a:	e1 54       	subi	r30, 0x41	; 65
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	80 81       	ld	r24, Z
    2c10:	89 8b       	std	Y+17, r24	; 0x11
			}
			while(MDIO_u8GetPinVal(KPD_PORT, row+4) == 0){}
    2c12:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c14:	98 2f       	mov	r25, r24
    2c16:	9c 5f       	subi	r25, 0xFC	; 252
    2c18:	82 e0       	ldi	r24, 0x02	; 2
    2c1a:	69 2f       	mov	r22, r25
    2c1c:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <MDIO_u8GetPinVal>
    2c20:	88 23       	and	r24, r24
    2c22:	b9 f3       	breq	.-18     	; 0x2c12 <HKPD_u8GetPressedKey+0x5e>
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	a0 e2       	ldi	r26, 0x20	; 32
    2c2a:	b1 e4       	ldi	r27, 0x41	; 65
    2c2c:	8b 87       	std	Y+11, r24	; 0x0b
    2c2e:	9c 87       	std	Y+12, r25	; 0x0c
    2c30:	ad 87       	std	Y+13, r26	; 0x0d
    2c32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	4a ef       	ldi	r20, 0xFA	; 250
    2c42:	54 e4       	ldi	r21, 0x44	; 68
    2c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	8f 83       	std	Y+7, r24	; 0x07
    2c4e:	98 87       	std	Y+8, r25	; 0x08
    2c50:	a9 87       	std	Y+9, r26	; 0x09
    2c52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c54:	6f 81       	ldd	r22, Y+7	; 0x07
    2c56:	78 85       	ldd	r23, Y+8	; 0x08
    2c58:	89 85       	ldd	r24, Y+9	; 0x09
    2c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e8       	ldi	r20, 0x80	; 128
    2c62:	5f e3       	ldi	r21, 0x3F	; 63
    2c64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c68:	88 23       	and	r24, r24
    2c6a:	2c f4       	brge	.+10     	; 0x2c76 <HKPD_u8GetPressedKey+0xc2>
		__ticks = 1;
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	9e 83       	std	Y+6, r25	; 0x06
    2c72:	8d 83       	std	Y+5, r24	; 0x05
    2c74:	3f c0       	rjmp	.+126    	; 0x2cf4 <HKPD_u8GetPressedKey+0x140>
	else if (__tmp > 65535)
    2c76:	6f 81       	ldd	r22, Y+7	; 0x07
    2c78:	78 85       	ldd	r23, Y+8	; 0x08
    2c7a:	89 85       	ldd	r24, Y+9	; 0x09
    2c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	3f ef       	ldi	r19, 0xFF	; 255
    2c82:	4f e7       	ldi	r20, 0x7F	; 127
    2c84:	57 e4       	ldi	r21, 0x47	; 71
    2c86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c8a:	18 16       	cp	r1, r24
    2c8c:	4c f5       	brge	.+82     	; 0x2ce0 <HKPD_u8GetPressedKey+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e2       	ldi	r20, 0x20	; 32
    2c9c:	51 e4       	ldi	r21, 0x41	; 65
    2c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	bc 01       	movw	r22, r24
    2ca8:	cd 01       	movw	r24, r26
    2caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	9e 83       	std	Y+6, r25	; 0x06
    2cb4:	8d 83       	std	Y+5, r24	; 0x05
    2cb6:	0f c0       	rjmp	.+30     	; 0x2cd6 <HKPD_u8GetPressedKey+0x122>
    2cb8:	88 ec       	ldi	r24, 0xC8	; 200
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	9c 83       	std	Y+4, r25	; 0x04
    2cbe:	8b 83       	std	Y+3, r24	; 0x03
    2cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc4:	01 97       	sbiw	r24, 0x01	; 1
    2cc6:	f1 f7       	brne	.-4      	; 0x2cc4 <HKPD_u8GetPressedKey+0x110>
    2cc8:	9c 83       	std	Y+4, r25	; 0x04
    2cca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cce:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	9e 83       	std	Y+6, r25	; 0x06
    2cd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cda:	00 97       	sbiw	r24, 0x00	; 0
    2cdc:	69 f7       	brne	.-38     	; 0x2cb8 <HKPD_u8GetPressedKey+0x104>
    2cde:	14 c0       	rjmp	.+40     	; 0x2d08 <HKPD_u8GetPressedKey+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce2:	78 85       	ldd	r23, Y+8	; 0x08
    2ce4:	89 85       	ldd	r24, Y+9	; 0x09
    2ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	9e 83       	std	Y+6, r25	; 0x06
    2cf2:	8d 83       	std	Y+5, r24	; 0x05
    2cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf8:	9a 83       	std	Y+2, r25	; 0x02
    2cfa:	89 83       	std	Y+1, r24	; 0x01
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	f1 f7       	brne	.-4      	; 0x2d00 <HKPD_u8GetPressedKey+0x14c>
    2d04:	9a 83       	std	Y+2, r25	; 0x02
    2d06:	89 83       	std	Y+1, r24	; 0x01
	u8 pressed_key = 0 ;
	for(u8 col=0; col<4; col++)
	{
		/* activate current column */
		MDIO_vSetPinVal(KPD_PORT, col, DIO_LOW);
		for(u8 row=0; row < 4; row++)
    2d08:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d0a:	8f 5f       	subi	r24, 0xFF	; 255
    2d0c:	8f 87       	std	Y+15, r24	; 0x0f
    2d0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d10:	84 30       	cpi	r24, 0x04	; 4
    2d12:	08 f4       	brcc	.+2      	; 0x2d16 <HKPD_u8GetPressedKey+0x162>
    2d14:	63 cf       	rjmp	.-314    	; 0x2bdc <HKPD_u8GetPressedKey+0x28>
			}
			while(MDIO_u8GetPinVal(KPD_PORT, row+4) == 0){}
			_delay_ms(10);
		}
		/* deactivate current column */
		MDIO_vSetPinVal(KPD_PORT, col, DIO_HIGH);
    2d16:	82 e0       	ldi	r24, 0x02	; 2
    2d18:	68 89       	ldd	r22, Y+16	; 0x10
    2d1a:	41 e0       	ldi	r20, 0x01	; 1
    2d1c:	0e 94 19 0c 	call	0x1832	; 0x1832 <MDIO_vSetPinVal>
}

u8   HKPD_u8GetPressedKey(void)
{
	u8 pressed_key = 0 ;
	for(u8 col=0; col<4; col++)
    2d20:	88 89       	ldd	r24, Y+16	; 0x10
    2d22:	8f 5f       	subi	r24, 0xFF	; 255
    2d24:	88 8b       	std	Y+16, r24	; 0x10
    2d26:	88 89       	ldd	r24, Y+16	; 0x10
    2d28:	84 30       	cpi	r24, 0x04	; 4
    2d2a:	08 f4       	brcc	.+2      	; 0x2d2e <HKPD_u8GetPressedKey+0x17a>
    2d2c:	50 cf       	rjmp	.-352    	; 0x2bce <HKPD_u8GetPressedKey+0x1a>
			_delay_ms(10);
		}
		/* deactivate current column */
		MDIO_vSetPinVal(KPD_PORT, col, DIO_HIGH);
	}
	return pressed_key;
    2d2e:	89 89       	ldd	r24, Y+17	; 0x11
}
    2d30:	61 96       	adiw	r28, 0x11	; 17
    2d32:	0f b6       	in	r0, 0x3f	; 63
    2d34:	f8 94       	cli
    2d36:	de bf       	out	0x3e, r29	; 62
    2d38:	0f be       	out	0x3f, r0	; 63
    2d3a:	cd bf       	out	0x3d, r28	; 61
    2d3c:	cf 91       	pop	r28
    2d3e:	df 91       	pop	r29
    2d40:	08 95       	ret

00002d42 <HDCM_vInit2>:
#include "../../MCAL/DIO/DIO_int.h"
#include "DCM-int.h"
#include "DCM-con.h"

void HDCM_vInit2(u8 A_DCM_PORT,u8 A_DCM_PIN_NO)
{
    2d42:	df 93       	push	r29
    2d44:	cf 93       	push	r28
    2d46:	00 d0       	rcall	.+0      	; 0x2d48 <HDCM_vInit2+0x6>
    2d48:	00 d0       	rcall	.+0      	; 0x2d4a <HDCM_vInit2+0x8>
    2d4a:	cd b7       	in	r28, 0x3d	; 61
    2d4c:	de b7       	in	r29, 0x3e	; 62
    2d4e:	89 83       	std	Y+1, r24	; 0x01
    2d50:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_DCM_PORT)
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	28 2f       	mov	r18, r24
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	3c 83       	std	Y+4, r19	; 0x04
    2d5a:	2b 83       	std	Y+3, r18	; 0x03
    2d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d60:	81 30       	cpi	r24, 0x01	; 1
    2d62:	91 05       	cpc	r25, r1
    2d64:	d9 f0       	breq	.+54     	; 0x2d9c <HDCM_vInit2+0x5a>
    2d66:	2b 81       	ldd	r18, Y+3	; 0x03
    2d68:	3c 81       	ldd	r19, Y+4	; 0x04
    2d6a:	22 30       	cpi	r18, 0x02	; 2
    2d6c:	31 05       	cpc	r19, r1
    2d6e:	2c f4       	brge	.+10     	; 0x2d7a <HDCM_vInit2+0x38>
    2d70:	8b 81       	ldd	r24, Y+3	; 0x03
    2d72:	9c 81       	ldd	r25, Y+4	; 0x04
    2d74:	00 97       	sbiw	r24, 0x00	; 0
    2d76:	61 f0       	breq	.+24     	; 0x2d90 <HDCM_vInit2+0x4e>
    2d78:	22 c0       	rjmp	.+68     	; 0x2dbe <HDCM_vInit2+0x7c>
    2d7a:	2b 81       	ldd	r18, Y+3	; 0x03
    2d7c:	3c 81       	ldd	r19, Y+4	; 0x04
    2d7e:	22 30       	cpi	r18, 0x02	; 2
    2d80:	31 05       	cpc	r19, r1
    2d82:	91 f0       	breq	.+36     	; 0x2da8 <HDCM_vInit2+0x66>
    2d84:	8b 81       	ldd	r24, Y+3	; 0x03
    2d86:	9c 81       	ldd	r25, Y+4	; 0x04
    2d88:	83 30       	cpi	r24, 0x03	; 3
    2d8a:	91 05       	cpc	r25, r1
    2d8c:	99 f0       	breq	.+38     	; 0x2db4 <HDCM_vInit2+0x72>
    2d8e:	17 c0       	rjmp	.+46     	; 0x2dbe <HDCM_vInit2+0x7c>
	{
	case DIO_PORTA:
		MDIO_vSetPinDir(DIO_PORTA,A_DCM_PIN_NO,DIO_OUTPUT);
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	6a 81       	ldd	r22, Y+2	; 0x02
    2d94:	41 e0       	ldi	r20, 0x01	; 1
    2d96:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_vSetPinDir>
    2d9a:	11 c0       	rjmp	.+34     	; 0x2dbe <HDCM_vInit2+0x7c>
		break;
	case DIO_PORTB:
		MDIO_vSetPinDir(DIO_PORTB,A_DCM_PIN_NO,DIO_OUTPUT);
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	6a 81       	ldd	r22, Y+2	; 0x02
    2da0:	41 e0       	ldi	r20, 0x01	; 1
    2da2:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_vSetPinDir>
    2da6:	0b c0       	rjmp	.+22     	; 0x2dbe <HDCM_vInit2+0x7c>
			break;
	case DIO_PORTC:
		MDIO_vSetPinDir(DIO_PORTC,A_DCM_PIN_NO,DIO_OUTPUT);
    2da8:	82 e0       	ldi	r24, 0x02	; 2
    2daa:	6a 81       	ldd	r22, Y+2	; 0x02
    2dac:	41 e0       	ldi	r20, 0x01	; 1
    2dae:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_vSetPinDir>
    2db2:	05 c0       	rjmp	.+10     	; 0x2dbe <HDCM_vInit2+0x7c>
			break;
	case DIO_PORTD:
		MDIO_vSetPinDir(DIO_PORTD,A_DCM_PIN_NO,DIO_OUTPUT);
    2db4:	83 e0       	ldi	r24, 0x03	; 3
    2db6:	6a 81       	ldd	r22, Y+2	; 0x02
    2db8:	41 e0       	ldi	r20, 0x01	; 1
    2dba:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_vSetPinDir>
			break;
	}
}
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	0f 90       	pop	r0
    2dc6:	cf 91       	pop	r28
    2dc8:	df 91       	pop	r29
    2dca:	08 95       	ret

00002dcc <HDCM_vInit>:
void HDCM_vInit(void)
{
    2dcc:	df 93       	push	r29
    2dce:	cf 93       	push	r28
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinDir(DCM_PORT,DCM_PIN0,DIO_OUTPUT);
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	60 e0       	ldi	r22, 0x00	; 0
    2dd8:	41 e0       	ldi	r20, 0x01	; 1
    2dda:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DCM_PORT,DCM_PIN1,DIO_OUTPUT);
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	61 e0       	ldi	r22, 0x01	; 1
    2de2:	41 e0       	ldi	r20, 0x01	; 1
    2de4:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_vSetPinDir>
}
    2de8:	cf 91       	pop	r28
    2dea:	df 91       	pop	r29
    2dec:	08 95       	ret

00002dee <HDCM_vRotateCW>:

void HDCM_vRotateCW(void)
{
    2dee:	df 93       	push	r29
    2df0:	cf 93       	push	r28
    2df2:	cd b7       	in	r28, 0x3d	; 61
    2df4:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinVal(DCM_PORT,DCM_PIN0,DIO_HIGH);
    2df6:	80 e0       	ldi	r24, 0x00	; 0
    2df8:	60 e0       	ldi	r22, 0x00	; 0
    2dfa:	41 e0       	ldi	r20, 0x01	; 1
    2dfc:	0e 94 19 0c 	call	0x1832	; 0x1832 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(DCM_PORT,DCM_PIN1,DIO_LOW);
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	61 e0       	ldi	r22, 0x01	; 1
    2e04:	40 e0       	ldi	r20, 0x00	; 0
    2e06:	0e 94 19 0c 	call	0x1832	; 0x1832 <MDIO_vSetPinVal>
}
    2e0a:	cf 91       	pop	r28
    2e0c:	df 91       	pop	r29
    2e0e:	08 95       	ret

00002e10 <HDCM_vRotateCCW>:

void HDCM_vRotateCCW(void)
{
    2e10:	df 93       	push	r29
    2e12:	cf 93       	push	r28
    2e14:	cd b7       	in	r28, 0x3d	; 61
    2e16:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinVal(DCM_PORT,DCM_PIN0,DIO_LOW);
    2e18:	80 e0       	ldi	r24, 0x00	; 0
    2e1a:	60 e0       	ldi	r22, 0x00	; 0
    2e1c:	40 e0       	ldi	r20, 0x00	; 0
    2e1e:	0e 94 19 0c 	call	0x1832	; 0x1832 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(DCM_PORT,DCM_PIN1,DIO_HIGH);
    2e22:	80 e0       	ldi	r24, 0x00	; 0
    2e24:	61 e0       	ldi	r22, 0x01	; 1
    2e26:	41 e0       	ldi	r20, 0x01	; 1
    2e28:	0e 94 19 0c 	call	0x1832	; 0x1832 <MDIO_vSetPinVal>

}
    2e2c:	cf 91       	pop	r28
    2e2e:	df 91       	pop	r29
    2e30:	08 95       	ret

00002e32 <HDCM_vStop>:

void HDCM_vStop(void)
{
    2e32:	df 93       	push	r29
    2e34:	cf 93       	push	r28
    2e36:	cd b7       	in	r28, 0x3d	; 61
    2e38:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinVal(DCM_PORT,DCM_PIN0,DIO_LOW);
    2e3a:	80 e0       	ldi	r24, 0x00	; 0
    2e3c:	60 e0       	ldi	r22, 0x00	; 0
    2e3e:	40 e0       	ldi	r20, 0x00	; 0
    2e40:	0e 94 19 0c 	call	0x1832	; 0x1832 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(DCM_PORT,DCM_PIN1,DIO_LOW);
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	61 e0       	ldi	r22, 0x01	; 1
    2e48:	40 e0       	ldi	r20, 0x00	; 0
    2e4a:	0e 94 19 0c 	call	0x1832	; 0x1832 <MDIO_vSetPinVal>
}
    2e4e:	cf 91       	pop	r28
    2e50:	df 91       	pop	r29
    2e52:	08 95       	ret

00002e54 <__divmodsi4>:
    2e54:	97 fb       	bst	r25, 7
    2e56:	09 2e       	mov	r0, r25
    2e58:	05 26       	eor	r0, r21
    2e5a:	0e d0       	rcall	.+28     	; 0x2e78 <__divmodsi4_neg1>
    2e5c:	57 fd       	sbrc	r21, 7
    2e5e:	04 d0       	rcall	.+8      	; 0x2e68 <__divmodsi4_neg2>
    2e60:	14 d0       	rcall	.+40     	; 0x2e8a <__udivmodsi4>
    2e62:	0a d0       	rcall	.+20     	; 0x2e78 <__divmodsi4_neg1>
    2e64:	00 1c       	adc	r0, r0
    2e66:	38 f4       	brcc	.+14     	; 0x2e76 <__divmodsi4_exit>

00002e68 <__divmodsi4_neg2>:
    2e68:	50 95       	com	r21
    2e6a:	40 95       	com	r20
    2e6c:	30 95       	com	r19
    2e6e:	21 95       	neg	r18
    2e70:	3f 4f       	sbci	r19, 0xFF	; 255
    2e72:	4f 4f       	sbci	r20, 0xFF	; 255
    2e74:	5f 4f       	sbci	r21, 0xFF	; 255

00002e76 <__divmodsi4_exit>:
    2e76:	08 95       	ret

00002e78 <__divmodsi4_neg1>:
    2e78:	f6 f7       	brtc	.-4      	; 0x2e76 <__divmodsi4_exit>
    2e7a:	90 95       	com	r25
    2e7c:	80 95       	com	r24
    2e7e:	70 95       	com	r23
    2e80:	61 95       	neg	r22
    2e82:	7f 4f       	sbci	r23, 0xFF	; 255
    2e84:	8f 4f       	sbci	r24, 0xFF	; 255
    2e86:	9f 4f       	sbci	r25, 0xFF	; 255
    2e88:	08 95       	ret

00002e8a <__udivmodsi4>:
    2e8a:	a1 e2       	ldi	r26, 0x21	; 33
    2e8c:	1a 2e       	mov	r1, r26
    2e8e:	aa 1b       	sub	r26, r26
    2e90:	bb 1b       	sub	r27, r27
    2e92:	fd 01       	movw	r30, r26
    2e94:	0d c0       	rjmp	.+26     	; 0x2eb0 <__udivmodsi4_ep>

00002e96 <__udivmodsi4_loop>:
    2e96:	aa 1f       	adc	r26, r26
    2e98:	bb 1f       	adc	r27, r27
    2e9a:	ee 1f       	adc	r30, r30
    2e9c:	ff 1f       	adc	r31, r31
    2e9e:	a2 17       	cp	r26, r18
    2ea0:	b3 07       	cpc	r27, r19
    2ea2:	e4 07       	cpc	r30, r20
    2ea4:	f5 07       	cpc	r31, r21
    2ea6:	20 f0       	brcs	.+8      	; 0x2eb0 <__udivmodsi4_ep>
    2ea8:	a2 1b       	sub	r26, r18
    2eaa:	b3 0b       	sbc	r27, r19
    2eac:	e4 0b       	sbc	r30, r20
    2eae:	f5 0b       	sbc	r31, r21

00002eb0 <__udivmodsi4_ep>:
    2eb0:	66 1f       	adc	r22, r22
    2eb2:	77 1f       	adc	r23, r23
    2eb4:	88 1f       	adc	r24, r24
    2eb6:	99 1f       	adc	r25, r25
    2eb8:	1a 94       	dec	r1
    2eba:	69 f7       	brne	.-38     	; 0x2e96 <__udivmodsi4_loop>
    2ebc:	60 95       	com	r22
    2ebe:	70 95       	com	r23
    2ec0:	80 95       	com	r24
    2ec2:	90 95       	com	r25
    2ec4:	9b 01       	movw	r18, r22
    2ec6:	ac 01       	movw	r20, r24
    2ec8:	bd 01       	movw	r22, r26
    2eca:	cf 01       	movw	r24, r30
    2ecc:	08 95       	ret

00002ece <__prologue_saves__>:
    2ece:	2f 92       	push	r2
    2ed0:	3f 92       	push	r3
    2ed2:	4f 92       	push	r4
    2ed4:	5f 92       	push	r5
    2ed6:	6f 92       	push	r6
    2ed8:	7f 92       	push	r7
    2eda:	8f 92       	push	r8
    2edc:	9f 92       	push	r9
    2ede:	af 92       	push	r10
    2ee0:	bf 92       	push	r11
    2ee2:	cf 92       	push	r12
    2ee4:	df 92       	push	r13
    2ee6:	ef 92       	push	r14
    2ee8:	ff 92       	push	r15
    2eea:	0f 93       	push	r16
    2eec:	1f 93       	push	r17
    2eee:	cf 93       	push	r28
    2ef0:	df 93       	push	r29
    2ef2:	cd b7       	in	r28, 0x3d	; 61
    2ef4:	de b7       	in	r29, 0x3e	; 62
    2ef6:	ca 1b       	sub	r28, r26
    2ef8:	db 0b       	sbc	r29, r27
    2efa:	0f b6       	in	r0, 0x3f	; 63
    2efc:	f8 94       	cli
    2efe:	de bf       	out	0x3e, r29	; 62
    2f00:	0f be       	out	0x3f, r0	; 63
    2f02:	cd bf       	out	0x3d, r28	; 61
    2f04:	09 94       	ijmp

00002f06 <__epilogue_restores__>:
    2f06:	2a 88       	ldd	r2, Y+18	; 0x12
    2f08:	39 88       	ldd	r3, Y+17	; 0x11
    2f0a:	48 88       	ldd	r4, Y+16	; 0x10
    2f0c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f0e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f10:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f12:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f14:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f16:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f18:	b9 84       	ldd	r11, Y+9	; 0x09
    2f1a:	c8 84       	ldd	r12, Y+8	; 0x08
    2f1c:	df 80       	ldd	r13, Y+7	; 0x07
    2f1e:	ee 80       	ldd	r14, Y+6	; 0x06
    2f20:	fd 80       	ldd	r15, Y+5	; 0x05
    2f22:	0c 81       	ldd	r16, Y+4	; 0x04
    2f24:	1b 81       	ldd	r17, Y+3	; 0x03
    2f26:	aa 81       	ldd	r26, Y+2	; 0x02
    2f28:	b9 81       	ldd	r27, Y+1	; 0x01
    2f2a:	ce 0f       	add	r28, r30
    2f2c:	d1 1d       	adc	r29, r1
    2f2e:	0f b6       	in	r0, 0x3f	; 63
    2f30:	f8 94       	cli
    2f32:	de bf       	out	0x3e, r29	; 62
    2f34:	0f be       	out	0x3f, r0	; 63
    2f36:	cd bf       	out	0x3d, r28	; 61
    2f38:	ed 01       	movw	r28, r26
    2f3a:	08 95       	ret

00002f3c <_exit>:
    2f3c:	f8 94       	cli

00002f3e <__stop_program>:
    2f3e:	ff cf       	rjmp	.-2      	; 0x2f3e <__stop_program>
